# Generated from SimpleQL.g4 by ANTLR 4.6
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3")
        buf.write(u"\u009f\u03e9\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\3")
        buf.write(u"\2\3\2\7\2q\n\2\f\2\16\2t\13\2\3\2\3\2\3\3\3\3\3\3\3")
        buf.write(u"\4\7\4|\n\4\f\4\16\4\177\13\4\3\4\3\4\6\4\u0083\n\4\r")
        buf.write(u"\4\16\4\u0084\3\4\7\4\u0088\n\4\f\4\16\4\u008b\13\4\3")
        buf.write(u"\4\7\4\u008e\n\4\f\4\16\4\u0091\13\4\3\5\3\5\3\5\5\5")
        buf.write(u"\u0096\n\5\5\5\u0098\n\5\3\5\3\5\5\5\u009c\n\5\3\6\3")
        buf.write(u"\6\5\6\u00a0\n\6\3\6\3\6\3\6\7\6\u00a5\n\6\f\6\16\6\u00a8")
        buf.write(u"\13\6\5\6\u00aa\n\6\3\6\3\6\3\6\3\6\3\6\3\6\7\6\u00b2")
        buf.write(u"\n\6\f\6\16\6\u00b5\13\6\5\6\u00b7\n\6\3\6\3\6\3\6\3")
        buf.write(u"\6\5\6\u00bd\n\6\5\6\u00bf\n\6\3\7\3\7\5\7\u00c3\n\7")
        buf.write(u"\3\7\3\7\3\7\7\7\u00c8\n\7\f\7\16\7\u00cb\13\7\5\7\u00cd")
        buf.write(u"\n\7\3\7\3\7\3\7\3\7\7\7\u00d3\n\7\f\7\16\7\u00d6\13")
        buf.write(u"\7\3\7\3\7\3\7\3\7\3\7\7\7\u00dd\n\7\f\7\16\7\u00e0\13")
        buf.write(u"\7\5\7\u00e2\n\7\3\7\3\7\3\7\3\7\5\7\u00e8\n\7\5\7\u00ea")
        buf.write(u"\n\7\3\b\3\b\5\b\u00ee\n\b\3\b\3\b\3\b\7\b\u00f3\n\b")
        buf.write(u"\f\b\16\b\u00f6\13\b\3\b\3\b\3\b\3\b\7\b\u00fc\n\b\f")
        buf.write(u"\b\16\b\u00ff\13\b\3\b\5\b\u0102\n\b\5\b\u0104\n\b\3")
        buf.write(u"\b\3\b\5\b\u0108\n\b\3\b\3\b\3\b\3\b\3\b\7\b\u010f\n")
        buf.write(u"\b\f\b\16\b\u0112\13\b\3\b\3\b\5\b\u0116\n\b\5\b\u0118")
        buf.write(u"\n\b\3\b\3\b\3\b\3\b\3\b\7\b\u011f\n\b\f\b\16\b\u0122")
        buf.write(u"\13\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u012a\n\b\f\b\16\b")
        buf.write(u"\u012d\13\b\3\b\3\b\7\b\u0131\n\b\f\b\16\b\u0134\13\b")
        buf.write(u"\5\b\u0136\n\b\3\t\3\t\5\t\u013a\n\t\3\t\7\t\u013d\n")
        buf.write(u"\t\f\t\16\t\u0140\13\t\3\n\6\n\u0143\n\n\r\n\16\n\u0144")
        buf.write(u"\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0151\n")
        buf.write(u"\n\3\13\3\13\5\13\u0155\n\13\3\13\3\13\3\13\5\13\u015a")
        buf.write(u"\n\13\3\13\3\13\5\13\u015e\n\13\3\13\5\13\u0161\n\13")
        buf.write(u"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3")
        buf.write(u"\13\3\13\3\13\3\13\3\13\3\13\5\13\u0173\n\13\3\13\3\13")
        buf.write(u"\3\13\5\13\u0178\n\13\3\f\3\f\3\f\5\f\u017d\n\f\3\r\3")
        buf.write(u"\r\3\r\3\r\3\r\3\r\5\r\u0185\n\r\3\r\3\r\3\r\5\r\u018a")
        buf.write(u"\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0193\n\r\3\r\3")
        buf.write(u"\r\3\r\7\r\u0198\n\r\f\r\16\r\u019b\13\r\3\r\5\r\u019e")
        buf.write(u"\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write(u"\3\r\3\r\5\r\u01ae\n\r\3\r\5\r\u01b1\n\r\3\r\3\r\3\r")
        buf.write(u"\3\r\3\r\3\r\5\r\u01b9\n\r\3\r\3\r\3\r\3\r\3\r\6\r\u01c0")
        buf.write(u"\n\r\r\r\16\r\u01c1\3\r\3\r\5\r\u01c6\n\r\3\r\3\r\3\r")
        buf.write(u"\5\r\u01cb\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write(u"\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write(u"\r\3\r\3\r\3\r\3\r\3\r\5\r\u01e9\n\r\3\r\3\r\3\r\3\r")
        buf.write(u"\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u01f5\n\r\3\r\3\r\3\r\5")
        buf.write(u"\r\u01fa\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write(u"\5\r\u0206\n\r\3\r\3\r\3\r\3\r\5\r\u020c\n\r\3\r\3\r")
        buf.write(u"\3\r\3\r\3\r\5\r\u0213\n\r\3\r\3\r\5\r\u0217\n\r\3\r")
        buf.write(u"\3\r\3\r\3\r\3\r\3\r\7\r\u021f\n\r\f\r\16\r\u0222\13")
        buf.write(u"\r\5\r\u0224\n\r\3\r\3\r\3\r\3\r\5\r\u022a\n\r\3\r\5")
        buf.write(u"\r\u022d\n\r\7\r\u022f\n\r\f\r\16\r\u0232\13\r\3\16\3")
        buf.write(u"\16\3\16\3\16\3\16\3\16\7\16\u023a\n\16\f\16\16\16\u023d")
        buf.write(u"\13\16\3\16\3\16\5\16\u0241\n\16\3\16\3\16\3\16\3\16")
        buf.write(u"\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u024d\n\16\3\16\3")
        buf.write(u"\16\5\16\u0251\n\16\7\16\u0253\n\16\f\16\16\16\u0256")
        buf.write(u"\13\16\3\16\5\16\u0259\n\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\5\16\u0260\n\16\5\16\u0262\n\16\3\17\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\5\17\u026a\n\17\3\17\3\17\3\20\3\20\3\20\5")
        buf.write(u"\20\u0271\n\20\3\20\5\20\u0274\n\20\3\21\3\21\5\21\u0278")
        buf.write(u"\n\21\3\21\3\21\3\21\5\21\u027d\n\21\3\21\3\21\3\21\3")
        buf.write(u"\21\7\21\u0283\n\21\f\21\16\21\u0286\13\21\3\21\3\21")
        buf.write(u"\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write(u"\21\3\21\7\21\u0296\n\21\f\21\16\21\u0299\13\21\3\21")
        buf.write(u"\3\21\3\21\5\21\u029e\n\21\3\22\3\22\5\22\u02a2\n\22")
        buf.write(u"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write(u"\22\3\22\7\22\u02b0\n\22\f\22\16\22\u02b3\13\22\3\23")
        buf.write(u"\3\23\3\23\5\23\u02b8\n\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write(u"\23\5\23\u02c0\n\23\3\24\3\24\3\24\5\24\u02c5\n\24\3")
        buf.write(u"\24\5\24\u02c8\n\24\3\25\3\25\3\25\5\25\u02cd\n\25\3")
        buf.write(u"\26\3\26\3\26\3\26\3\26\7\26\u02d4\n\26\f\26\16\26\u02d7")
        buf.write(u"\13\26\3\26\3\26\5\26\u02db\n\26\3\26\3\26\3\26\3\26")
        buf.write(u"\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u02e9\n")
        buf.write(u"\27\3\27\5\27\u02ec\n\27\5\27\u02ee\n\27\3\30\3\30\3")
        buf.write(u"\30\5\30\u02f3\n\30\3\30\3\30\5\30\u02f7\n\30\3\30\5")
        buf.write(u"\30\u02fa\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u0301\n")
        buf.write(u"\30\3\30\3\30\3\30\3\30\7\30\u0307\n\30\f\30\16\30\u030a")
        buf.write(u"\13\30\3\30\5\30\u030d\n\30\3\30\3\30\5\30\u0311\n\30")
        buf.write(u"\3\30\5\30\u0314\n\30\3\30\3\30\3\30\3\30\5\30\u031a")
        buf.write(u"\n\30\3\30\5\30\u031d\n\30\5\30\u031f\n\30\3\31\3\31")
        buf.write(u"\3\31\3\31\3\31\7\31\u0326\n\31\f\31\16\31\u0329\13\31")
        buf.write(u"\3\32\3\32\5\32\u032d\n\32\3\32\3\32\5\32\u0331\n\32")
        buf.write(u"\3\32\3\32\5\32\u0335\n\32\3\32\5\32\u0338\n\32\3\33")
        buf.write(u"\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u0341\n\33\f\33\16")
        buf.write(u"\33\u0344\13\33\3\33\3\33\5\33\u0348\n\33\3\34\3\34\5")
        buf.write(u"\34\u034c\n\34\3\34\3\34\3\34\7\34\u0351\n\34\f\34\16")
        buf.write(u"\34\u0354\13\34\3\34\3\34\3\34\3\34\7\34\u035a\n\34\f")
        buf.write(u"\34\16\34\u035d\13\34\3\34\5\34\u0360\n\34\5\34\u0362")
        buf.write(u"\n\34\3\34\3\34\5\34\u0366\n\34\3\34\3\34\3\34\3\34\3")
        buf.write(u"\34\7\34\u036d\n\34\f\34\16\34\u0370\13\34\3\34\3\34")
        buf.write(u"\5\34\u0374\n\34\5\34\u0376\n\34\3\34\3\34\3\34\3\34")
        buf.write(u"\3\34\7\34\u037d\n\34\f\34\16\34\u0380\13\34\3\34\3\34")
        buf.write(u"\3\34\3\34\3\34\3\34\7\34\u0388\n\34\f\34\16\34\u038b")
        buf.write(u"\13\34\3\34\3\34\7\34\u038f\n\34\f\34\16\34\u0392\13")
        buf.write(u"\34\5\34\u0394\n\34\3\35\3\35\3\35\3\35\3\35\5\35\u039b")
        buf.write(u"\n\35\3\36\3\36\3\36\3\36\3\36\7\36\u03a2\n\36\f\36\16")
        buf.write(u"\36\u03a5\13\36\3\36\3\36\5\36\u03a9\n\36\3\37\5\37\u03ac")
        buf.write(u"\n\37\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\5#\u03b8\n")
        buf.write(u"#\3$\3$\3%\3%\3&\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\3+\3")
        buf.write(u",\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62")
        buf.write(u"\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\3")
        buf.write(u"\67\3\67\3\67\3\67\3\67\5\67\u03e7\n\67\3\67\2\3\308")
        buf.write(u"\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write(u"\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjl\2\21\4\2\7\7ll\4\2")
        buf.write(u"\37\37@@\4\2$$>>\7\2\33\33JJSS||\177\177\4\2\t\t\16\17")
        buf.write(u"\3\2\n\13\3\2\20\23\3\2\24\27\6\2OOcceexx\4\2==\u008d")
        buf.write(u"\u008d\5\2\33\33JJ\177\177\6\2\668jj\u0098\u0098\u009a")
        buf.write(u"\u009b\4\2\n\fhh\4\2\u0097\u0097\u009a\u009a\3\2\33\u0096")
        buf.write(u"\u0473\2r\3\2\2\2\4w\3\2\2\2\6}\3\2\2\2\b\u0097\3\2\2")
        buf.write(u"\2\n\u00a9\3\2\2\2\f\u00cc\3\2\2\2\16\u0135\3\2\2\2\20")
        buf.write(u"\u0137\3\2\2\2\22\u0142\3\2\2\2\24\u0154\3\2\2\2\26\u017c")
        buf.write(u"\3\2\2\2\30\u01ca\3\2\2\2\32\u0233\3\2\2\2\34\u0263\3")
        buf.write(u"\2\2\2\36\u026d\3\2\2\2 \u0277\3\2\2\2\"\u029f\3\2\2")
        buf.write(u"\2$\u02b7\3\2\2\2&\u02c1\3\2\2\2(\u02cc\3\2\2\2*\u02ce")
        buf.write(u"\3\2\2\2,\u02ed\3\2\2\2.\u031e\3\2\2\2\60\u0320\3\2\2")
        buf.write(u"\2\62\u0337\3\2\2\2\64\u0347\3\2\2\2\66\u0393\3\2\2\2")
        buf.write(u"8\u039a\3\2\2\2:\u039c\3\2\2\2<\u03ab\3\2\2\2>\u03af")
        buf.write(u"\3\2\2\2@\u03b1\3\2\2\2B\u03b3\3\2\2\2D\u03b7\3\2\2\2")
        buf.write(u"F\u03b9\3\2\2\2H\u03bb\3\2\2\2J\u03bd\3\2\2\2L\u03bf")
        buf.write(u"\3\2\2\2N\u03c1\3\2\2\2P\u03c3\3\2\2\2R\u03c5\3\2\2\2")
        buf.write(u"T\u03c7\3\2\2\2V\u03c9\3\2\2\2X\u03cb\3\2\2\2Z\u03cd")
        buf.write(u"\3\2\2\2\\\u03cf\3\2\2\2^\u03d1\3\2\2\2`\u03d3\3\2\2")
        buf.write(u"\2b\u03d5\3\2\2\2d\u03d7\3\2\2\2f\u03d9\3\2\2\2h\u03db")
        buf.write(u"\3\2\2\2j\u03dd\3\2\2\2l\u03e6\3\2\2\2nq\5\6\4\2oq\5")
        buf.write(u"\4\3\2pn\3\2\2\2po\3\2\2\2qt\3\2\2\2rp\3\2\2\2rs\3\2")
        buf.write(u"\2\2su\3\2\2\2tr\3\2\2\2uv\7\2\2\3v\3\3\2\2\2wx\7\u009f")
        buf.write(u"\2\2xy\b\3\1\2y\5\3\2\2\2z|\7\3\2\2{z\3\2\2\2|\177\3")
        buf.write(u"\2\2\2}{\3\2\2\2}~\3\2\2\2~\u0080\3\2\2\2\177}\3\2\2")
        buf.write(u"\2\u0080\u0089\5\b\5\2\u0081\u0083\7\3\2\2\u0082\u0081")
        buf.write(u"\3\2\2\2\u0083\u0084\3\2\2\2\u0084\u0082\3\2\2\2\u0084")
        buf.write(u"\u0085\3\2\2\2\u0085\u0086\3\2\2\2\u0086\u0088\5\b\5")
        buf.write(u"\2\u0087\u0082\3\2\2\2\u0088\u008b\3\2\2\2\u0089\u0087")
        buf.write(u"\3\2\2\2\u0089\u008a\3\2\2\2\u008a\u008f\3\2\2\2\u008b")
        buf.write(u"\u0089\3\2\2\2\u008c\u008e\7\3\2\2\u008d\u008c\3\2\2")
        buf.write(u"\2\u008e\u0091\3\2\2\2\u008f\u008d\3\2\2\2\u008f\u0090")
        buf.write(u"\3\2\2\2\u0090\7\3\2\2\2\u0091\u008f\3\2\2\2\u0092\u0095")
        buf.write(u"\7I\2\2\u0093\u0094\7t\2\2\u0094\u0096\7q\2\2\u0095\u0093")
        buf.write(u"\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u0098\3\2\2\2\u0097")
        buf.write(u"\u0092\3\2\2\2\u0097\u0098\3\2\2\2\u0098\u009b\3\2\2")
        buf.write(u"\2\u0099\u009c\5\n\6\2\u009a\u009c\5\f\7\2\u009b\u0099")
        buf.write(u"\3\2\2\2\u009b\u009a\3\2\2\2\u009c\t\3\2\2\2\u009d\u009f")
        buf.write(u"\7\u0095\2\2\u009e\u00a0\7v\2\2\u009f\u009e\3\2\2\2\u009f")
        buf.write(u"\u00a0\3\2\2\2\u00a0\u00a1\3\2\2\2\u00a1\u00a6\5*\26")
        buf.write(u"\2\u00a2\u00a3\7\7\2\2\u00a3\u00a5\5*\26\2\u00a4\u00a2")
        buf.write(u"\3\2\2\2\u00a5\u00a8\3\2\2\2\u00a6\u00a4\3\2\2\2\u00a6")
        buf.write(u"\u00a7\3\2\2\2\u00a7\u00aa\3\2\2\2\u00a8\u00a6\3\2\2")
        buf.write(u"\2\u00a9\u009d\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00ab")
        buf.write(u"\3\2\2\2\u00ab\u00b6\5\66\34\2\u00ac\u00ad\7o\2\2\u00ad")
        buf.write(u"\u00ae\7*\2\2\u00ae\u00b3\5&\24\2\u00af\u00b0\7\7\2\2")
        buf.write(u"\u00b0\u00b2\5&\24\2\u00b1\u00af\3\2\2\2\u00b2\u00b5")
        buf.write(u"\3\2\2\2\u00b3\u00b1\3\2\2\2\u00b3\u00b4\3\2\2\2\u00b4")
        buf.write(u"\u00b7\3\2\2\2\u00b5\u00b3\3\2\2\2\u00b6\u00ac\3\2\2")
        buf.write(u"\2\u00b6\u00b7\3\2\2\2\u00b7\u00be\3\2\2\2\u00b8\u00b9")
        buf.write(u"\7d\2\2\u00b9\u00bc\5\30\r\2\u00ba\u00bb\t\2\2\2\u00bb")
        buf.write(u"\u00bd\5\30\r\2\u00bc\u00ba\3\2\2\2\u00bc\u00bd\3\2\2")
        buf.write(u"\2\u00bd\u00bf\3\2\2\2\u00be\u00b8\3\2\2\2\u00be\u00bf")
        buf.write(u"\3\2\2\2\u00bf\13\3\2\2\2\u00c0\u00c2\7\u0095\2\2\u00c1")
        buf.write(u"\u00c3\7v\2\2\u00c2\u00c1\3\2\2\2\u00c2\u00c3\3\2\2\2")
        buf.write(u"\u00c3\u00c4\3\2\2\2\u00c4\u00c9\5*\26\2\u00c5\u00c6")
        buf.write(u"\7\7\2\2\u00c6\u00c8\5*\26\2\u00c7\u00c5\3\2\2\2\u00c8")
        buf.write(u"\u00cb\3\2\2\2\u00c9\u00c7\3\2\2\2\u00c9\u00ca\3\2\2")
        buf.write(u"\2\u00ca\u00cd\3\2\2\2\u00cb\u00c9\3\2\2\2\u00cc\u00c0")
        buf.write(u"\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce")
        buf.write(u"\u00d4\5\16\b\2\u00cf\u00d0\58\35\2\u00d0\u00d1\5\16")
        buf.write(u"\b\2\u00d1\u00d3\3\2\2\2\u00d2\u00cf\3\2\2\2\u00d3\u00d6")
        buf.write(u"\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d4\u00d5\3\2\2\2\u00d5")
        buf.write(u"\u00e1\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d7\u00d8\7o\2\2")
        buf.write(u"\u00d8\u00d9\7*\2\2\u00d9\u00de\5&\24\2\u00da\u00db\7")
        buf.write(u"\7\2\2\u00db\u00dd\5&\24\2\u00dc\u00da\3\2\2\2\u00dd")
        buf.write(u"\u00e0\3\2\2\2\u00de\u00dc\3\2\2\2\u00de\u00df\3\2\2")
        buf.write(u"\2\u00df\u00e2\3\2\2\2\u00e0\u00de\3\2\2\2\u00e1\u00d7")
        buf.write(u"\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e9\3\2\2\2\u00e3")
        buf.write(u"\u00e4\7d\2\2\u00e4\u00e7\5\30\r\2\u00e5\u00e6\t\2\2")
        buf.write(u"\2\u00e6\u00e8\5\30\r\2\u00e7\u00e5\3\2\2\2\u00e7\u00e8")
        buf.write(u"\3\2\2\2\u00e8\u00ea\3\2\2\2\u00e9\u00e3\3\2\2\2\u00e9")
        buf.write(u"\u00ea\3\2\2\2\u00ea\r\3\2\2\2\u00eb\u00ed\7\u0082\2")
        buf.write(u"\2\u00ec\u00ee\t\3\2\2\u00ed\u00ec\3\2\2\2\u00ed\u00ee")
        buf.write(u"\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef\u00f4\5,\27\2\u00f0")
        buf.write(u"\u00f1\7\7\2\2\u00f1\u00f3\5,\27\2\u00f2\u00f0\3\2\2")
        buf.write(u"\2\u00f3\u00f6\3\2\2\2\u00f4\u00f2\3\2\2\2\u00f4\u00f5")
        buf.write(u"\3\2\2\2\u00f5\u0103\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f7")
        buf.write(u"\u0101\7M\2\2\u00f8\u00fd\5.\30\2\u00f9\u00fa\7\7\2\2")
        buf.write(u"\u00fa\u00fc\5.\30\2\u00fb\u00f9\3\2\2\2\u00fc\u00ff")
        buf.write(u"\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe")
        buf.write(u"\u0102\3\2\2\2\u00ff\u00fd\3\2\2\2\u0100\u0102\5\60\31")
        buf.write(u"\2\u0101\u00f8\3\2\2\2\u0101\u0100\3\2\2\2\u0102\u0104")
        buf.write(u"\3\2\2\2\u0103\u00f7\3\2\2\2\u0103\u0104\3\2\2\2\u0104")
        buf.write(u"\u0107\3\2\2\2\u0105\u0106\7\u0094\2\2\u0106\u0108\5")
        buf.write(u"\30\r\2\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108")
        buf.write(u"\u0117\3\2\2\2\u0109\u010a\7P\2\2\u010a\u010b\7*\2\2")
        buf.write(u"\u010b\u0110\5\30\r\2\u010c\u010d\7\7\2\2\u010d\u010f")
        buf.write(u"\5\30\r\2\u010e\u010c\3\2\2\2\u010f\u0112\3\2\2\2\u0110")
        buf.write(u"\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u0115\3\2\2")
        buf.write(u"\2\u0112\u0110\3\2\2\2\u0113\u0114\7Q\2\2\u0114\u0116")
        buf.write(u"\5\30\r\2\u0115\u0113\3\2\2\2\u0115\u0116\3\2\2\2\u0116")
        buf.write(u"\u0118\3\2\2\2\u0117\u0109\3\2\2\2\u0117\u0118\3\2\2")
        buf.write(u"\2\u0118\u0136\3\2\2\2\u0119\u011a\7\u0090\2\2\u011a")
        buf.write(u"\u011b\7\5\2\2\u011b\u0120\5\30\r\2\u011c\u011d\7\7\2")
        buf.write(u"\2\u011d\u011f\5\30\r\2\u011e\u011c\3\2\2\2\u011f\u0122")
        buf.write(u"\3\2\2\2\u0120\u011e\3\2\2\2\u0120\u0121\3\2\2\2\u0121")
        buf.write(u"\u0123\3\2\2\2\u0122\u0120\3\2\2\2\u0123\u0132\7\6\2")
        buf.write(u"\2\u0124\u0125\7\7\2\2\u0125\u0126\7\5\2\2\u0126\u012b")
        buf.write(u"\5\30\r\2\u0127\u0128\7\7\2\2\u0128\u012a\5\30\r\2\u0129")
        buf.write(u"\u0127\3\2\2\2\u012a\u012d\3\2\2\2\u012b\u0129\3\2\2")
        buf.write(u"\2\u012b\u012c\3\2\2\2\u012c\u012e\3\2\2\2\u012d\u012b")
        buf.write(u"\3\2\2\2\u012e\u012f\7\6\2\2\u012f\u0131\3\2\2\2\u0130")
        buf.write(u"\u0124\3\2\2\2\u0131\u0134\3\2\2\2\u0132\u0130\3\2\2")
        buf.write(u"\2\u0132\u0133\3\2\2\2\u0133\u0136\3\2\2\2\u0134\u0132")
        buf.write(u"\3\2\2\2\u0135\u00eb\3\2\2\2\u0135\u0119\3\2\2\2\u0136")
        buf.write(u"\17\3\2\2\2\u0137\u0139\5V,\2\u0138\u013a\5\22\n\2\u0139")
        buf.write(u"\u0138\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013e\3\2\2")
        buf.write(u"\2\u013b\u013d\5\24\13\2\u013c\u013b\3\2\2\2\u013d\u0140")
        buf.write(u"\3\2\2\2\u013e\u013c\3\2\2\2\u013e\u013f\3\2\2\2\u013f")
        buf.write(u"\21\3\2\2\2\u0140\u013e\3\2\2\2\u0141\u0143\5J&\2\u0142")
        buf.write(u"\u0141\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0142\3\2\2")
        buf.write(u"\2\u0144\u0145\3\2\2\2\u0145\u0150\3\2\2\2\u0146\u0147")
        buf.write(u"\7\5\2\2\u0147\u0148\5<\37\2\u0148\u0149\7\6\2\2\u0149")
        buf.write(u"\u0151\3\2\2\2\u014a\u014b\7\5\2\2\u014b\u014c\5<\37")
        buf.write(u"\2\u014c\u014d\7\7\2\2\u014d\u014e\5<\37\2\u014e\u014f")
        buf.write(u"\7\6\2\2\u014f\u0151\3\2\2\2\u0150\u0146\3\2\2\2\u0150")
        buf.write(u"\u014a\3\2\2\2\u0150\u0151\3\2\2\2\u0151\23\3\2\2\2\u0152")
        buf.write(u"\u0153\7\63\2\2\u0153\u0155\5J&\2\u0154\u0152\3\2\2\2")
        buf.write(u"\u0154\u0155\3\2\2\2\u0155\u0177\3\2\2\2\u0156\u0157")
        buf.write(u"\7s\2\2\u0157\u0159\7a\2\2\u0158\u015a\t\4\2\2\u0159")
        buf.write(u"\u0158\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015b\3\2\2")
        buf.write(u"\2\u015b\u015d\5\26\f\2\u015c\u015e\7&\2\2\u015d\u015c")
        buf.write(u"\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u0178\3\2\2\2\u015f")
        buf.write(u"\u0161\7h\2\2\u0160\u015f\3\2\2\2\u0160\u0161\3\2\2\2")
        buf.write(u"\u0161\u0162\3\2\2\2\u0162\u0163\7j\2\2\u0163\u0178\5")
        buf.write(u"\26\f\2\u0164\u0165\7\u008c\2\2\u0165\u0178\5\26\f\2")
        buf.write(u"\u0166\u0167\7.\2\2\u0167\u0168\7\5\2\2\u0168\u0169\5")
        buf.write(u"\30\r\2\u0169\u016a\7\6\2\2\u016a\u0178\3\2\2\2\u016b")
        buf.write(u"\u0172\7:\2\2\u016c\u0173\5<\37\2\u016d\u0173\5> \2\u016e")
        buf.write(u"\u016f\7\5\2\2\u016f\u0170\5\30\r\2\u0170\u0171\7\6\2")
        buf.write(u"\2\u0171\u0173\3\2\2\2\u0172\u016c\3\2\2\2\u0172\u016d")
        buf.write(u"\3\2\2\2\u0172\u016e\3\2\2\2\u0173\u0178\3\2\2\2\u0174")
        buf.write(u"\u0175\7/\2\2\u0175\u0178\5X-\2\u0176\u0178\5\32\16\2")
        buf.write(u"\u0177\u0156\3\2\2\2\u0177\u0160\3\2\2\2\u0177\u0164")
        buf.write(u"\3\2\2\2\u0177\u0166\3\2\2\2\u0177\u016b\3\2\2\2\u0177")
        buf.write(u"\u0174\3\2\2\2\u0177\u0176\3\2\2\2\u0178\25\3\2\2\2\u0179")
        buf.write(u"\u017a\7m\2\2\u017a\u017b\7\62\2\2\u017b\u017d\t\5\2")
        buf.write(u"\2\u017c\u0179\3\2\2\2\u017c\u017d\3\2\2\2\u017d\27\3")
        buf.write(u"\2\2\2\u017e\u017f\b\r\1\2\u017f\u01cb\5> \2\u0180\u01cb")
        buf.write(u"\7\u0099\2\2\u0181\u0182\5N(\2\u0182\u0183\7\4\2\2\u0183")
        buf.write(u"\u0185\3\2\2\2\u0184\u0181\3\2\2\2\u0184\u0185\3\2\2")
        buf.write(u"\2\u0185\u0186\3\2\2\2\u0186\u0187\5P)\2\u0187\u0188")
        buf.write(u"\7\4\2\2\u0188\u018a\3\2\2\2\u0189\u0184\3\2\2\2\u0189")
        buf.write(u"\u018a\3\2\2\2\u018a\u018b\3\2\2\2\u018b\u01cb\5V,\2")
        buf.write(u"\u018c\u018d\5@!\2\u018d\u018e\5\30\r\27\u018e\u01cb")
        buf.write(u"\3\2\2\2\u018f\u0190\5L\'\2\u0190\u019d\7\5\2\2\u0191")
        buf.write(u"\u0193\7@\2\2\u0192\u0191\3\2\2\2\u0192\u0193\3\2\2\2")
        buf.write(u"\u0193\u0194\3\2\2\2\u0194\u0199\5\30\r\2\u0195\u0196")
        buf.write(u"\7\7\2\2\u0196\u0198\5\30\r\2\u0197\u0195\3\2\2\2\u0198")
        buf.write(u"\u019b\3\2\2\2\u0199\u0197\3\2\2\2\u0199\u019a\3\2\2")
        buf.write(u"\2\u019a\u019e\3\2\2\2\u019b\u0199\3\2\2\2\u019c\u019e")
        buf.write(u"\7\t\2\2\u019d\u0192\3\2\2\2\u019d\u019c\3\2\2\2\u019d")
        buf.write(u"\u019e\3\2\2\2\u019e\u019f\3\2\2\2\u019f\u01a0\7\6\2")
        buf.write(u"\2\u01a0\u01cb\3\2\2\2\u01a1\u01a2\7\5\2\2\u01a2\u01a3")
        buf.write(u"\5\30\r\2\u01a3\u01a4\7\6\2\2\u01a4\u01cb\3\2\2\2\u01a5")
        buf.write(u"\u01a6\7-\2\2\u01a6\u01a7\7\5\2\2\u01a7\u01a8\5\30\r")
        buf.write(u"\2\u01a8\u01a9\7#\2\2\u01a9\u01aa\5\22\n\2\u01aa\u01ab")
        buf.write(u"\7\6\2\2\u01ab\u01cb\3\2\2\2\u01ac\u01ae\7h\2\2\u01ad")
        buf.write(u"\u01ac\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\3\2\2")
        buf.write(u"\2\u01af\u01b1\7H\2\2\u01b0\u01ad\3\2\2\2\u01b0\u01b1")
        buf.write(u"\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01b3\7\5\2\2\u01b3")
        buf.write(u"\u01b4\5\f\7\2\u01b4\u01b5\7\6\2\2\u01b5\u01cb\3\2\2")
        buf.write(u"\2\u01b6\u01b8\7,\2\2\u01b7\u01b9\5\30\r\2\u01b8\u01b7")
        buf.write(u"\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01bf\3\2\2\2\u01ba")
        buf.write(u"\u01bb\7\u0093\2\2\u01bb\u01bc\5\30\r\2\u01bc\u01bd\7")
        buf.write(u"\u0087\2\2\u01bd\u01be\5\30\r\2\u01be\u01c0\3\2\2\2\u01bf")
        buf.write(u"\u01ba\3\2\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01bf\3\2\2")
        buf.write(u"\2\u01c1\u01c2\3\2\2\2\u01c2\u01c5\3\2\2\2\u01c3\u01c4")
        buf.write(u"\7C\2\2\u01c4\u01c6\5\30\r\2\u01c5\u01c3\3\2\2\2\u01c5")
        buf.write(u"\u01c6\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01c8\7D\2\2")
        buf.write(u"\u01c8\u01cb\3\2\2\2\u01c9\u01cb\5\34\17\2\u01ca\u017e")
        buf.write(u"\3\2\2\2\u01ca\u0180\3\2\2\2\u01ca\u0189\3\2\2\2\u01ca")
        buf.write(u"\u018c\3\2\2\2\u01ca\u018f\3\2\2\2\u01ca\u01a1\3\2\2")
        buf.write(u"\2\u01ca\u01a5\3\2\2\2\u01ca\u01b0\3\2\2\2\u01ca\u01b6")
        buf.write(u"\3\2\2\2\u01ca\u01c9\3\2\2\2\u01cb\u0230\3\2\2\2\u01cc")
        buf.write(u"\u01cd\f\26\2\2\u01cd\u01ce\7\r\2\2\u01ce\u022f\5\30")
        buf.write(u"\r\27\u01cf\u01d0\f\25\2\2\u01d0\u01d1\t\6\2\2\u01d1")
        buf.write(u"\u022f\5\30\r\26\u01d2\u01d3\f\24\2\2\u01d3\u01d4\t\7")
        buf.write(u"\2\2\u01d4\u022f\5\30\r\25\u01d5\u01d6\f\23\2\2\u01d6")
        buf.write(u"\u01d7\t\b\2\2\u01d7\u022f\5\30\r\24\u01d8\u01d9\f\22")
        buf.write(u"\2\2\u01d9\u01da\t\t\2\2\u01da\u022f\5\30\r\23\u01db")
        buf.write(u"\u01e8\f\21\2\2\u01dc\u01e9\7\b\2\2\u01dd\u01e9\7\30")
        buf.write(u"\2\2\u01de\u01e9\7\31\2\2\u01df\u01e9\7\32\2\2\u01e0")
        buf.write(u"\u01e9\7^\2\2\u01e1\u01e2\7^\2\2\u01e2\u01e9\7h\2\2\u01e3")
        buf.write(u"\u01e9\7U\2\2\u01e4\u01e9\7c\2\2\u01e5\u01e9\7O\2\2\u01e6")
        buf.write(u"\u01e9\7e\2\2\u01e7\u01e9\7x\2\2\u01e8\u01dc\3\2\2\2")
        buf.write(u"\u01e8\u01dd\3\2\2\2\u01e8\u01de\3\2\2\2\u01e8\u01df")
        buf.write(u"\3\2\2\2\u01e8\u01e0\3\2\2\2\u01e8\u01e1\3\2\2\2\u01e8")
        buf.write(u"\u01e3\3\2\2\2\u01e8\u01e4\3\2\2\2\u01e8\u01e5\3\2\2")
        buf.write(u"\2\u01e8\u01e6\3\2\2\2\u01e8\u01e7\3\2\2\2\u01e9\u01ea")
        buf.write(u"\3\2\2\2\u01ea\u022f\5\30\r\22\u01eb\u01ec\f\20\2\2\u01ec")
        buf.write(u"\u01ed\7\"\2\2\u01ed\u022f\5\30\r\21\u01ee\u01ef\f\17")
        buf.write(u"\2\2\u01ef\u01f0\7n\2\2\u01f0\u022f\5\30\r\20\u01f1\u01f2")
        buf.write(u"\f\b\2\2\u01f2\u01f4\7^\2\2\u01f3\u01f5\7h\2\2\u01f4")
        buf.write(u"\u01f3\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f6\3\2\2")
        buf.write(u"\2\u01f6\u022f\5\30\r\t\u01f7\u01f9\f\7\2\2\u01f8\u01fa")
        buf.write(u"\7h\2\2\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa")
        buf.write(u"\u01fb\3\2\2\2\u01fb\u01fc\7)\2\2\u01fc\u01fd\5\30\r")
        buf.write(u"\2\u01fd\u01fe\7\"\2\2\u01fe\u01ff\5\30\r\b\u01ff\u022f")
        buf.write(u"\3\2\2\2\u0200\u0201\f\13\2\2\u0201\u0202\7/\2\2\u0202")
        buf.write(u"\u022f\5X-\2\u0203\u0205\f\n\2\2\u0204\u0206\7h\2\2\u0205")
        buf.write(u"\u0204\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0207\3\2\2")
        buf.write(u"\2\u0207\u0208\t\n\2\2\u0208\u020b\5\30\r\2\u0209\u020a")
        buf.write(u"\7E\2\2\u020a\u020c\5\30\r\2\u020b\u0209\3\2\2\2\u020b")
        buf.write(u"\u020c\3\2\2\2\u020c\u022f\3\2\2\2\u020d\u0212\f\t\2")
        buf.write(u"\2\u020e\u0213\7_\2\2\u020f\u0213\7i\2\2\u0210\u0211")
        buf.write(u"\7h\2\2\u0211\u0213\7j\2\2\u0212\u020e\3\2\2\2\u0212")
        buf.write(u"\u020f\3\2\2\2\u0212\u0210\3\2\2\2\u0213\u022f\3\2\2")
        buf.write(u"\2\u0214\u0216\f\6\2\2\u0215\u0217\7h\2\2\u0216\u0215")
        buf.write(u"\3\2\2\2\u0216\u0217\3\2\2\2\u0217\u0218\3\2\2\2\u0218")
        buf.write(u"\u022c\7U\2\2\u0219\u0223\7\5\2\2\u021a\u0224\5\f\7\2")
        buf.write(u"\u021b\u0220\5\30\r\2\u021c\u021d\7\7\2\2\u021d\u021f")
        buf.write(u"\5\30\r\2\u021e\u021c\3\2\2\2\u021f\u0222\3\2\2\2\u0220")
        buf.write(u"\u021e\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0224\3\2\2")
        buf.write(u"\2\u0222\u0220\3\2\2\2\u0223\u021a\3\2\2\2\u0223\u021b")
        buf.write(u"\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0225\3\2\2\2\u0225")
        buf.write(u"\u022d\7\6\2\2\u0226\u0227\5N(\2\u0227\u0228\7\4\2\2")
        buf.write(u"\u0228\u022a\3\2\2\2\u0229\u0226\3\2\2\2\u0229\u022a")
        buf.write(u"\3\2\2\2\u022a\u022b\3\2\2\2\u022b\u022d\5P)\2\u022c")
        buf.write(u"\u0219\3\2\2\2\u022c\u0229\3\2\2\2\u022d\u022f\3\2\2")
        buf.write(u"\2\u022e\u01cc\3\2\2\2\u022e\u01cf\3\2\2\2\u022e\u01d2")
        buf.write(u"\3\2\2\2\u022e\u01d5\3\2\2\2\u022e\u01d8\3\2\2\2\u022e")
        buf.write(u"\u01db\3\2\2\2\u022e\u01eb\3\2\2\2\u022e\u01ee\3\2\2")
        buf.write(u"\2\u022e\u01f1\3\2\2\2\u022e\u01f7\3\2\2\2\u022e\u0200")
        buf.write(u"\3\2\2\2\u022e\u0203\3\2\2\2\u022e\u020d\3\2\2\2\u022e")
        buf.write(u"\u0214\3\2\2\2\u022f\u0232\3\2\2\2\u0230\u022e\3\2\2")
        buf.write(u"\2\u0230\u0231\3\2\2\2\u0231\31\3\2\2\2\u0232\u0230\3")
        buf.write(u"\2\2\2\u0233\u0234\7w\2\2\u0234\u0240\5Z.\2\u0235\u0236")
        buf.write(u"\7\5\2\2\u0236\u023b\5V,\2\u0237\u0238\7\7\2\2\u0238")
        buf.write(u"\u023a\5V,\2\u0239\u0237\3\2\2\2\u023a\u023d\3\2\2\2")
        buf.write(u"\u023b\u0239\3\2\2\2\u023b\u023c\3\2\2\2\u023c\u023e")
        buf.write(u"\3\2\2\2\u023d\u023b\3\2\2\2\u023e\u023f\7\6\2\2\u023f")
        buf.write(u"\u0241\3\2\2\2\u0240\u0235\3\2\2\2\u0240\u0241\3\2\2")
        buf.write(u"\2\u0241\u0254\3\2\2\2\u0242\u0243\7m\2\2\u0243\u024c")
        buf.write(u"\t\13\2\2\u0244\u0245\7\u0083\2\2\u0245\u024d\7j\2\2")
        buf.write(u"\u0246\u0247\7\u0083\2\2\u0247\u024d\7:\2\2\u0248\u024d")
        buf.write(u"\7+\2\2\u0249\u024d\7}\2\2\u024a\u024b\7g\2\2\u024b\u024d")
        buf.write(u"\7\34\2\2\u024c\u0244\3\2\2\2\u024c\u0246\3\2\2\2\u024c")
        buf.write(u"\u0248\3\2\2\2\u024c\u0249\3\2\2\2\u024c\u024a\3\2\2")
        buf.write(u"\2\u024d\u0251\3\2\2\2\u024e\u024f\7e\2\2\u024f\u0251")
        buf.write(u"\5J&\2\u0250\u0242\3\2\2\2\u0250\u024e\3\2\2\2\u0251")
        buf.write(u"\u0253\3\2\2\2\u0252\u0250\3\2\2\2\u0253\u0256\3\2\2")
        buf.write(u"\2\u0254\u0252\3\2\2\2\u0254\u0255\3\2\2\2\u0255\u0261")
        buf.write(u"\3\2\2\2\u0256\u0254\3\2\2\2\u0257\u0259\7h\2\2\u0258")
        buf.write(u"\u0257\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025a\3\2\2")
        buf.write(u"\2\u025a\u025f\7;\2\2\u025b\u025c\7X\2\2\u025c\u0260")
        buf.write(u"\7<\2\2\u025d\u025e\7X\2\2\u025e\u0260\7T\2\2\u025f\u025b")
        buf.write(u"\3\2\2\2\u025f\u025d\3\2\2\2\u025f\u0260\3\2\2\2\u0260")
        buf.write(u"\u0262\3\2\2\2\u0261\u0258\3\2\2\2\u0261\u0262\3\2\2")
        buf.write(u"\2\u0262\33\3\2\2\2\u0263\u0264\7u\2\2\u0264\u0269\7")
        buf.write(u"\5\2\2\u0265\u026a\7S\2\2\u0266\u0267\t\f\2\2\u0267\u0268")
        buf.write(u"\7\7\2\2\u0268\u026a\5B\"\2\u0269\u0265\3\2\2\2\u0269")
        buf.write(u"\u0266\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026c\7\6\2")
        buf.write(u"\2\u026c\35\3\2\2\2\u026d\u0270\5V,\2\u026e\u026f\7/")
        buf.write(u"\2\2\u026f\u0271\5X-\2\u0270\u026e\3\2\2\2\u0270\u0271")
        buf.write(u"\3\2\2\2\u0271\u0273\3\2\2\2\u0272\u0274\t\4\2\2\u0273")
        buf.write(u"\u0272\3\2\2\2\u0273\u0274\3\2\2\2\u0274\37\3\2\2\2\u0275")
        buf.write(u"\u0276\7\63\2\2\u0276\u0278\5J&\2\u0277\u0275\3\2\2\2")
        buf.write(u"\u0277\u0278\3\2\2\2\u0278\u029d\3\2\2\2\u0279\u027a")
        buf.write(u"\7s\2\2\u027a\u027d\7a\2\2\u027b\u027d\7\u008c\2\2\u027c")
        buf.write(u"\u0279\3\2\2\2\u027c\u027b\3\2\2\2\u027d\u027e\3\2\2")
        buf.write(u"\2\u027e\u027f\7\5\2\2\u027f\u0284\5\36\20\2\u0280\u0281")
        buf.write(u"\7\7\2\2\u0281\u0283\5\36\20\2\u0282\u0280\3\2\2\2\u0283")
        buf.write(u"\u0286\3\2\2\2\u0284\u0282\3\2\2\2\u0284\u0285\3\2\2")
        buf.write(u"\2\u0285\u0287\3\2\2\2\u0286\u0284\3\2\2\2\u0287\u0288")
        buf.write(u"\7\6\2\2\u0288\u0289\5\26\f\2\u0289\u029e\3\2\2\2\u028a")
        buf.write(u"\u028b\7.\2\2\u028b\u028c\7\5\2\2\u028c\u028d\5\30\r")
        buf.write(u"\2\u028d\u028e\7\6\2\2\u028e\u029e\3\2\2\2\u028f\u0290")
        buf.write(u"\7L\2\2\u0290\u0291\7a\2\2\u0291\u0292\7\5\2\2\u0292")
        buf.write(u"\u0297\5V,\2\u0293\u0294\7\7\2\2\u0294\u0296\5V,\2\u0295")
        buf.write(u"\u0293\3\2\2\2\u0296\u0299\3\2\2\2\u0297\u0295\3\2\2")
        buf.write(u"\2\u0297\u0298\3\2\2\2\u0298\u029a\3\2\2\2\u0299\u0297")
        buf.write(u"\3\2\2\2\u029a\u029b\7\6\2\2\u029b\u029c\5\32\16\2\u029c")
        buf.write(u"\u029e\3\2\2\2\u029d\u027c\3\2\2\2\u029d\u028a\3\2\2")
        buf.write(u"\2\u029d\u028f\3\2\2\2\u029e!\3\2\2\2\u029f\u02a1\7\u0095")
        buf.write(u"\2\2\u02a0\u02a2\7v\2\2\u02a1\u02a0\3\2\2\2\u02a1\u02a2")
        buf.write(u"\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a4\5:\36\2\u02a4")
        buf.write(u"\u02a5\7#\2\2\u02a5\u02a6\7\5\2\2\u02a6\u02a7\5\f\7\2")
        buf.write(u"\u02a7\u02b1\7\6\2\2\u02a8\u02a9\7\7\2\2\u02a9\u02aa")
        buf.write(u"\5:\36\2\u02aa\u02ab\7#\2\2\u02ab\u02ac\7\5\2\2\u02ac")
        buf.write(u"\u02ad\5\f\7\2\u02ad\u02ae\7\6\2\2\u02ae\u02b0\3\2\2")
        buf.write(u"\2\u02af\u02a8\3\2\2\2\u02b0\u02b3\3\2\2\2\u02b1\u02af")
        buf.write(u"\3\2\2\2\u02b1\u02b2\3\2\2\2\u02b2#\3\2\2\2\u02b3\u02b1")
        buf.write(u"\3\2\2\2\u02b4\u02b5\5N(\2\u02b5\u02b6\7\4\2\2\u02b6")
        buf.write(u"\u02b8\3\2\2\2\u02b7\u02b4\3\2\2\2\u02b7\u02b8\3\2\2")
        buf.write(u"\2\u02b8\u02b9\3\2\2\2\u02b9\u02bf\5P)\2\u02ba\u02bb")
        buf.write(u"\7W\2\2\u02bb\u02bc\7*\2\2\u02bc\u02c0\5\\/\2\u02bd\u02be")
        buf.write(u"\7h\2\2\u02be\u02c0\7W\2\2\u02bf\u02ba\3\2\2\2\u02bf")
        buf.write(u"\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0%\3\2\2\2\u02c1")
        buf.write(u"\u02c4\5\30\r\2\u02c2\u02c3\7/\2\2\u02c3\u02c5\5X-\2")
        buf.write(u"\u02c4\u02c2\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c7")
        buf.write(u"\3\2\2\2\u02c6\u02c8\t\4\2\2\u02c7\u02c6\3\2\2\2\u02c7")
        buf.write(u"\u02c8\3\2\2\2\u02c8\'\3\2\2\2\u02c9\u02cd\5<\37\2\u02ca")
        buf.write(u"\u02cd\5J&\2\u02cb\u02cd\7\u009a\2\2\u02cc\u02c9\3\2")
        buf.write(u"\2\2\u02cc\u02ca\3\2\2\2\u02cc\u02cb\3\2\2\2\u02cd)\3")
        buf.write(u"\2\2\2\u02ce\u02da\5P)\2\u02cf\u02d0\7\5\2\2\u02d0\u02d5")
        buf.write(u"\5V,\2\u02d1\u02d2\7\7\2\2\u02d2\u02d4\5V,\2\u02d3\u02d1")
        buf.write(u"\3\2\2\2\u02d4\u02d7\3\2\2\2\u02d5\u02d3\3\2\2\2\u02d5")
        buf.write(u"\u02d6\3\2\2\2\u02d6\u02d8\3\2\2\2\u02d7\u02d5\3\2\2")
        buf.write(u"\2\u02d8\u02d9\7\6\2\2\u02d9\u02db\3\2\2\2\u02da\u02cf")
        buf.write(u"\3\2\2\2\u02da\u02db\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc")
        buf.write(u"\u02dd\7#\2\2\u02dd\u02de\7\5\2\2\u02de\u02df\5\f\7\2")
        buf.write(u"\u02df\u02e0\7\6\2\2\u02e0+\3\2\2\2\u02e1\u02ee\7\t\2")
        buf.write(u"\2\u02e2\u02e3\5P)\2\u02e3\u02e4\7\4\2\2\u02e4\u02e5")
        buf.write(u"\7\t\2\2\u02e5\u02ee\3\2\2\2\u02e6\u02eb\5\30\r\2\u02e7")
        buf.write(u"\u02e9\7#\2\2\u02e8\u02e7\3\2\2\2\u02e8\u02e9\3\2\2\2")
        buf.write(u"\u02e9\u02ea\3\2\2\2\u02ea\u02ec\5F$\2\u02eb\u02e8\3")
        buf.write(u"\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ee\3\2\2\2\u02ed")
        buf.write(u"\u02e1\3\2\2\2\u02ed\u02e2\3\2\2\2\u02ed\u02e6\3\2\2")
        buf.write(u"\2\u02ee-\3\2\2\2\u02ef\u02f0\5N(\2\u02f0\u02f1\7\4\2")
        buf.write(u"\2\u02f1\u02f3\3\2\2\2\u02f2\u02ef\3\2\2\2\u02f2\u02f3")
        buf.write(u"\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f9\5P)\2\u02f5")
        buf.write(u"\u02f7\7#\2\2\u02f6\u02f5\3\2\2\2\u02f6\u02f7\3\2\2\2")
        buf.write(u"\u02f7\u02f8\3\2\2\2\u02f8\u02fa\5h\65\2\u02f9\u02f6")
        buf.write(u"\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u0300\3\2\2\2\u02fb")
        buf.write(u"\u02fc\7W\2\2\u02fc\u02fd\7*\2\2\u02fd\u0301\5\\/\2\u02fe")
        buf.write(u"\u02ff\7h\2\2\u02ff\u0301\7W\2\2\u0300\u02fb\3\2\2\2")
        buf.write(u"\u0300\u02fe\3\2\2\2\u0300\u0301\3\2\2\2\u0301\u031f")
        buf.write(u"\3\2\2\2\u0302\u030c\7\5\2\2\u0303\u0308\5.\30\2\u0304")
        buf.write(u"\u0305\7\7\2\2\u0305\u0307\5.\30\2\u0306\u0304\3\2\2")
        buf.write(u"\2\u0307\u030a\3\2\2\2\u0308\u0306\3\2\2\2\u0308\u0309")
        buf.write(u"\3\2\2\2\u0309\u030d\3\2\2\2\u030a\u0308\3\2\2\2\u030b")
        buf.write(u"\u030d\5\60\31\2\u030c\u0303\3\2\2\2\u030c\u030b\3\2")
        buf.write(u"\2\2\u030d\u030e\3\2\2\2\u030e\u0313\7\6\2\2\u030f\u0311")
        buf.write(u"\7#\2\2\u0310\u030f\3\2\2\2\u0310\u0311\3\2\2\2\u0311")
        buf.write(u"\u0312\3\2\2\2\u0312\u0314\5h\65\2\u0313\u0310\3\2\2")
        buf.write(u"\2\u0313\u0314\3\2\2\2\u0314\u031f\3\2\2\2\u0315\u0316")
        buf.write(u"\7\5\2\2\u0316\u0317\5\f\7\2\u0317\u031c\7\6\2\2\u0318")
        buf.write(u"\u031a\7#\2\2\u0319\u0318\3\2\2\2\u0319\u031a\3\2\2\2")
        buf.write(u"\u031a\u031b\3\2\2\2\u031b\u031d\5h\65\2\u031c\u0319")
        buf.write(u"\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u031f\3\2\2\2\u031e")
        buf.write(u"\u02f2\3\2\2\2\u031e\u0302\3\2\2\2\u031e\u0315\3\2\2")
        buf.write(u"\2\u031f/\3\2\2\2\u0320\u0327\5.\30\2\u0321\u0322\5\62")
        buf.write(u"\32\2\u0322\u0323\5.\30\2\u0323\u0324\5\64\33\2\u0324")
        buf.write(u"\u0326\3\2\2\2\u0325\u0321\3\2\2\2\u0326\u0329\3\2\2")
        buf.write(u"\2\u0327\u0325\3\2\2\2\u0327\u0328\3\2\2\2\u0328\61\3")
        buf.write(u"\2\2\2\u0329\u0327\3\2\2\2\u032a\u0338\7\7\2\2\u032b")
        buf.write(u"\u032d\7f\2\2\u032c\u032b\3\2\2\2\u032c\u032d\3\2\2\2")
        buf.write(u"\u032d\u0334\3\2\2\2\u032e\u0330\7b\2\2\u032f\u0331\7")
        buf.write(u"p\2\2\u0330\u032f\3\2\2\2\u0330\u0331\3\2\2\2\u0331\u0335")
        buf.write(u"\3\2\2\2\u0332\u0335\7Y\2\2\u0333\u0335\7\65\2\2\u0334")
        buf.write(u"\u032e\3\2\2\2\u0334\u0332\3\2\2\2\u0334\u0333\3\2\2")
        buf.write(u"\2\u0334\u0335\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0338")
        buf.write(u"\7`\2\2\u0337\u032a\3\2\2\2\u0337\u032c\3\2\2\2\u0338")
        buf.write(u"\63\3\2\2\2\u0339\u033a\7m\2\2\u033a\u0348\5\30\r\2\u033b")
        buf.write(u"\u033c\7\u008e\2\2\u033c\u033d\7\5\2\2\u033d\u0342\5")
        buf.write(u"V,\2\u033e\u033f\7\7\2\2\u033f\u0341\5V,\2\u0340\u033e")
        buf.write(u"\3\2\2\2\u0341\u0344\3\2\2\2\u0342\u0340\3\2\2\2\u0342")
        buf.write(u"\u0343\3\2\2\2\u0343\u0345\3\2\2\2\u0344\u0342\3\2\2")
        buf.write(u"\2\u0345\u0346\7\6\2\2\u0346\u0348\3\2\2\2\u0347\u0339")
        buf.write(u"\3\2\2\2\u0347\u033b\3\2\2\2\u0347\u0348\3\2\2\2\u0348")
        buf.write(u"\65\3\2\2\2\u0349\u034b\7\u0082\2\2\u034a\u034c\t\3\2")
        buf.write(u"\2\u034b\u034a\3\2\2\2\u034b\u034c\3\2\2\2\u034c\u034d")
        buf.write(u"\3\2\2\2\u034d\u0352\5,\27\2\u034e\u034f\7\7\2\2\u034f")
        buf.write(u"\u0351\5,\27\2\u0350\u034e\3\2\2\2\u0351\u0354\3\2\2")
        buf.write(u"\2\u0352\u0350\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0361")
        buf.write(u"\3\2\2\2\u0354\u0352\3\2\2\2\u0355\u035f\7M\2\2\u0356")
        buf.write(u"\u035b\5.\30\2\u0357\u0358\7\7\2\2\u0358\u035a\5.\30")
        buf.write(u"\2\u0359\u0357\3\2\2\2\u035a\u035d\3\2\2\2\u035b\u0359")
        buf.write(u"\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u0360\3\2\2\2\u035d")
        buf.write(u"\u035b\3\2\2\2\u035e\u0360\5\60\31\2\u035f\u0356\3\2")
        buf.write(u"\2\2\u035f\u035e\3\2\2\2\u0360\u0362\3\2\2\2\u0361\u0355")
        buf.write(u"\3\2\2\2\u0361\u0362\3\2\2\2\u0362\u0365\3\2\2\2\u0363")
        buf.write(u"\u0364\7\u0094\2\2\u0364\u0366\5\30\r\2\u0365\u0363\3")
        buf.write(u"\2\2\2\u0365\u0366\3\2\2\2\u0366\u0375\3\2\2\2\u0367")
        buf.write(u"\u0368\7P\2\2\u0368\u0369\7*\2\2\u0369\u036e\5\30\r\2")
        buf.write(u"\u036a\u036b\7\7\2\2\u036b\u036d\5\30\r\2\u036c\u036a")
        buf.write(u"\3\2\2\2\u036d\u0370\3\2\2\2\u036e\u036c\3\2\2\2\u036e")
        buf.write(u"\u036f\3\2\2\2\u036f\u0373\3\2\2\2\u0370\u036e\3\2\2")
        buf.write(u"\2\u0371\u0372\7Q\2\2\u0372\u0374\5\30\r\2\u0373\u0371")
        buf.write(u"\3\2\2\2\u0373\u0374\3\2\2\2\u0374\u0376\3\2\2\2\u0375")
        buf.write(u"\u0367\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0394\3\2\2")
        buf.write(u"\2\u0377\u0378\7\u0090\2\2\u0378\u0379\7\5\2\2\u0379")
        buf.write(u"\u037e\5\30\r\2\u037a\u037b\7\7\2\2\u037b\u037d\5\30")
        buf.write(u"\r\2\u037c\u037a\3\2\2\2\u037d\u0380\3\2\2\2\u037e\u037c")
        buf.write(u"\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0381\3\2\2\2\u0380")
        buf.write(u"\u037e\3\2\2\2\u0381\u0390\7\6\2\2\u0382\u0383\7\7\2")
        buf.write(u"\2\u0383\u0384\7\5\2\2\u0384\u0389\5\30\r\2\u0385\u0386")
        buf.write(u"\7\7\2\2\u0386\u0388\5\30\r\2\u0387\u0385\3\2\2\2\u0388")
        buf.write(u"\u038b\3\2\2\2\u0389\u0387\3\2\2\2\u0389\u038a\3\2\2")
        buf.write(u"\2\u038a\u038c\3\2\2\2\u038b\u0389\3\2\2\2\u038c\u038d")
        buf.write(u"\7\6\2\2\u038d\u038f\3\2\2\2\u038e\u0382\3\2\2\2\u038f")
        buf.write(u"\u0392\3\2\2\2\u0390\u038e\3\2\2\2\u0390\u0391\3\2\2")
        buf.write(u"\2\u0391\u0394\3\2\2\2\u0392\u0390\3\2\2\2\u0393\u0349")
        buf.write(u"\3\2\2\2\u0393\u0377\3\2\2\2\u0394\67\3\2\2\2\u0395\u039b")
        buf.write(u"\7\u008b\2\2\u0396\u0397\7\u008b\2\2\u0397\u039b\7\37")
        buf.write(u"\2\2\u0398\u039b\7\\\2\2\u0399\u039b\7F\2\2\u039a\u0395")
        buf.write(u"\3\2\2\2\u039a\u0396\3\2\2\2\u039a\u0398\3\2\2\2\u039a")
        buf.write(u"\u0399\3\2\2\2\u039b9\3\2\2\2\u039c\u03a8\5P)\2\u039d")
        buf.write(u"\u039e\7\5\2\2\u039e\u03a3\5V,\2\u039f\u03a0\7\7\2\2")
        buf.write(u"\u03a0\u03a2\5V,\2\u03a1\u039f\3\2\2\2\u03a2\u03a5\3")
        buf.write(u"\2\2\2\u03a3\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4")
        buf.write(u"\u03a6\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a6\u03a7\7\6\2")
        buf.write(u"\2\u03a7\u03a9\3\2\2\2\u03a8\u039d\3\2\2\2\u03a8\u03a9")
        buf.write(u"\3\2\2\2\u03a9;\3\2\2\2\u03aa\u03ac\t\7\2\2\u03ab\u03aa")
        buf.write(u"\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad")
        buf.write(u"\u03ae\7\u0098\2\2\u03ae=\3\2\2\2\u03af\u03b0\t\r\2\2")
        buf.write(u"\u03b0?\3\2\2\2\u03b1\u03b2\t\16\2\2\u03b2A\3\2\2\2\u03b3")
        buf.write(u"\u03b4\7\u009a\2\2\u03b4C\3\2\2\2\u03b5\u03b8\5\30\r")
        buf.write(u"\2\u03b6\u03b8\5\20\t\2\u03b7\u03b5\3\2\2\2\u03b7\u03b6")
        buf.write(u"\3\2\2\2\u03b8E\3\2\2\2\u03b9\u03ba\t\17\2\2\u03baG\3")
        buf.write(u"\2\2\2\u03bb\u03bc\t\20\2\2\u03bcI\3\2\2\2\u03bd\u03be")
        buf.write(u"\5l\67\2\u03beK\3\2\2\2\u03bf\u03c0\5l\67\2\u03c0M\3")
        buf.write(u"\2\2\2\u03c1\u03c2\5l\67\2\u03c2O\3\2\2\2\u03c3\u03c4")
        buf.write(u"\5l\67\2\u03c4Q\3\2\2\2\u03c5\u03c6\5l\67\2\u03c6S\3")
        buf.write(u"\2\2\2\u03c7\u03c8\5l\67\2\u03c8U\3\2\2\2\u03c9\u03ca")
        buf.write(u"\5l\67\2\u03caW\3\2\2\2\u03cb\u03cc\5l\67\2\u03ccY\3")
        buf.write(u"\2\2\2\u03cd\u03ce\5l\67\2\u03ce[\3\2\2\2\u03cf\u03d0")
        buf.write(u"\5l\67\2\u03d0]\3\2\2\2\u03d1\u03d2\5l\67\2\u03d2_\3")
        buf.write(u"\2\2\2\u03d3\u03d4\5l\67\2\u03d4a\3\2\2\2\u03d5\u03d6")
        buf.write(u"\5l\67\2\u03d6c\3\2\2\2\u03d7\u03d8\5l\67\2\u03d8e\3")
        buf.write(u"\2\2\2\u03d9\u03da\5l\67\2\u03dag\3\2\2\2\u03db\u03dc")
        buf.write(u"\5l\67\2\u03dci\3\2\2\2\u03dd\u03de\5l\67\2\u03dek\3")
        buf.write(u"\2\2\2\u03df\u03e7\7\u0097\2\2\u03e0\u03e7\5H%\2\u03e1")
        buf.write(u"\u03e7\7\u009a\2\2\u03e2\u03e3\7\5\2\2\u03e3\u03e4\5")
        buf.write(u"l\67\2\u03e4\u03e5\7\6\2\2\u03e5\u03e7\3\2\2\2\u03e6")
        buf.write(u"\u03df\3\2\2\2\u03e6\u03e0\3\2\2\2\u03e6\u03e1\3\2\2")
        buf.write(u"\2\u03e6\u03e2\3\2\2\2\u03e7m\3\2\2\2\u008bpr}\u0084")
        buf.write(u"\u0089\u008f\u0095\u0097\u009b\u009f\u00a6\u00a9\u00b3")
        buf.write(u"\u00b6\u00bc\u00be\u00c2\u00c9\u00cc\u00d4\u00de\u00e1")
        buf.write(u"\u00e7\u00e9\u00ed\u00f4\u00fd\u0101\u0103\u0107\u0110")
        buf.write(u"\u0115\u0117\u0120\u012b\u0132\u0135\u0139\u013e\u0144")
        buf.write(u"\u0150\u0154\u0159\u015d\u0160\u0172\u0177\u017c\u0184")
        buf.write(u"\u0189\u0192\u0199\u019d\u01ad\u01b0\u01b8\u01c1\u01c5")
        buf.write(u"\u01ca\u01e8\u01f4\u01f9\u0205\u020b\u0212\u0216\u0220")
        buf.write(u"\u0223\u0229\u022c\u022e\u0230\u023b\u0240\u024c\u0250")
        buf.write(u"\u0254\u0258\u025f\u0261\u0269\u0270\u0273\u0277\u027c")
        buf.write(u"\u0284\u0297\u029d\u02a1\u02b1\u02b7\u02bf\u02c4\u02c7")
        buf.write(u"\u02cc\u02d5\u02da\u02e8\u02eb\u02ed\u02f2\u02f6\u02f9")
        buf.write(u"\u0300\u0308\u030c\u0310\u0313\u0319\u031c\u031e\u0327")
        buf.write(u"\u032c\u0330\u0334\u0337\u0342\u0347\u034b\u0352\u035b")
        buf.write(u"\u035f\u0361\u0365\u036e\u0373\u0375\u037e\u0389\u0390")
        buf.write(u"\u0393\u039a\u03a3\u03a8\u03ab\u03b7\u03e6")
        return buf.getvalue()


class SimpleQLParser ( Parser ):

    grammarFileName = "SimpleQL.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"';'", u"'.'", u"'('", u"')'", u"','", 
                     u"'='", u"'*'", u"'+'", u"'-'", u"'~'", u"'||'", u"'/'", 
                     u"'%'", u"'<<'", u"'>>'", u"'&'", u"'|'", u"'<'", u"'<='", 
                     u"'>'", u"'>='", u"'=='", u"'!='", u"'<>'" ]

    symbolicNames = [ u"<INVALID>", u"SCOL", u"DOT", u"OPEN_PAR", u"CLOSE_PAR", 
                      u"COMMA", u"ASSIGN", u"STAR", u"PLUS", u"MINUS", u"TILDE", 
                      u"PIPE2", u"DIV", u"MOD", u"LT2", u"GT2", u"AMP", 
                      u"PIPE", u"LT", u"LT_EQ", u"GT", u"GT_EQ", u"EQ", 
                      u"NOT_EQ1", u"NOT_EQ2", u"K_ABORT", u"K_ACTION", u"K_ADD", 
                      u"K_AFTER", u"K_ALL", u"K_ALTER", u"K_ANALYZE", u"K_AND", 
                      u"K_AS", u"K_ASC", u"K_ATTACH", u"K_AUTOINCREMENT", 
                      u"K_BEFORE", u"K_BEGIN", u"K_BETWEEN", u"K_BY", u"K_CASCADE", 
                      u"K_CASE", u"K_CAST", u"K_CHECK", u"K_COLLATE", u"K_COLUMN", 
                      u"K_COMMIT", u"K_CONFLICT", u"K_CONSTRAINT", u"K_CREATE", 
                      u"K_CROSS", u"K_CURRENT_DATE", u"K_CURRENT_TIME", 
                      u"K_CURRENT_TIMESTAMP", u"K_DATABASE", u"K_DEFAULT", 
                      u"K_DEFERRABLE", u"K_DEFERRED", u"K_DELETE", u"K_DESC", 
                      u"K_DETACH", u"K_DISTINCT", u"K_DROP", u"K_EACH", 
                      u"K_ELSE", u"K_END", u"K_ESCAPE", u"K_EXCEPT", u"K_EXCLUSIVE", 
                      u"K_EXISTS", u"K_EXPLAIN", u"K_FAIL", u"K_FOR", u"K_FOREIGN", 
                      u"K_FROM", u"K_FULL", u"K_GLOB", u"K_GROUP", u"K_HAVING", 
                      u"K_IF", u"K_IGNORE", u"K_IMMEDIATE", u"K_IN", u"K_INDEX", 
                      u"K_INDEXED", u"K_INITIALLY", u"K_INNER", u"K_INSERT", 
                      u"K_INSTEAD", u"K_INTERSECT", u"K_INTO", u"K_IS", 
                      u"K_ISNULL", u"K_JOIN", u"K_KEY", u"K_LEFT", u"K_LIKE", 
                      u"K_LIMIT", u"K_MATCH", u"K_NATURAL", u"K_NO", u"K_NOT", 
                      u"K_NOTNULL", u"K_NULL", u"K_OF", u"K_OFFSET", u"K_ON", 
                      u"K_OR", u"K_ORDER", u"K_OUTER", u"K_PLAN", u"K_PRAGMA", 
                      u"K_PRIMARY", u"K_QUERY", u"K_RAISE", u"K_RECURSIVE", 
                      u"K_REFERENCES", u"K_REGEXP", u"K_REINDEX", u"K_RELEASE", 
                      u"K_RENAME", u"K_REPLACE", u"K_RESTRICT", u"K_RIGHT", 
                      u"K_ROLLBACK", u"K_ROW", u"K_SAVEPOINT", u"K_SELECT", 
                      u"K_SET", u"K_TABLE", u"K_TEMP", u"K_TEMPORARY", u"K_THEN", 
                      u"K_TO", u"K_TRANSACTION", u"K_TRIGGER", u"K_UNION", 
                      u"K_UNIQUE", u"K_UPDATE", u"K_USING", u"K_VACUUM", 
                      u"K_VALUES", u"K_VIEW", u"K_VIRTUAL", u"K_WHEN", u"K_WHERE", 
                      u"K_WITH", u"K_WITHOUT", u"IDENTIFIER", u"NUMERIC_LITERAL", 
                      u"BIND_PARAMETER", u"STRING_LITERAL", u"BLOB_LITERAL", 
                      u"SINGLE_LINE_COMMENT", u"MULTILINE_COMMENT", u"SPACES", 
                      u"UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_error = 1
    RULE_sql_stmt_list = 2
    RULE_sql_stmt = 3
    RULE_simple_select_stmt = 4
    RULE_select_stmt = 5
    RULE_select_or_values = 6
    RULE_column_def = 7
    RULE_type_name = 8
    RULE_column_constraint = 9
    RULE_conflict_clause = 10
    RULE_expr = 11
    RULE_foreign_key_clause = 12
    RULE_raise_function = 13
    RULE_indexed_column = 14
    RULE_table_constraint = 15
    RULE_with_clause = 16
    RULE_qualified_table_name = 17
    RULE_ordering_term = 18
    RULE_pragma_value = 19
    RULE_common_table_expression = 20
    RULE_result_column = 21
    RULE_table_or_subquery = 22
    RULE_join_clause = 23
    RULE_join_operator = 24
    RULE_join_constraint = 25
    RULE_select_core = 26
    RULE_compound_operator = 27
    RULE_cte_table_name = 28
    RULE_signed_number = 29
    RULE_literal_value = 30
    RULE_unary_operator = 31
    RULE_error_message = 32
    RULE_module_argument = 33
    RULE_column_alias = 34
    RULE_keyword = 35
    RULE_name = 36
    RULE_function_name = 37
    RULE_database_name = 38
    RULE_table_name = 39
    RULE_table_or_index_name = 40
    RULE_new_table_name = 41
    RULE_column_name = 42
    RULE_collation_name = 43
    RULE_foreign_table = 44
    RULE_index_name = 45
    RULE_trigger_name = 46
    RULE_view_name = 47
    RULE_module_name = 48
    RULE_pragma_name = 49
    RULE_savepoint_name = 50
    RULE_table_alias = 51
    RULE_transaction_name = 52
    RULE_any_name = 53

    ruleNames =  [ u"parse", u"error", u"sql_stmt_list", u"sql_stmt", u"simple_select_stmt", 
                   u"select_stmt", u"select_or_values", u"column_def", u"type_name", 
                   u"column_constraint", u"conflict_clause", u"expr", u"foreign_key_clause", 
                   u"raise_function", u"indexed_column", u"table_constraint", 
                   u"with_clause", u"qualified_table_name", u"ordering_term", 
                   u"pragma_value", u"common_table_expression", u"result_column", 
                   u"table_or_subquery", u"join_clause", u"join_operator", 
                   u"join_constraint", u"select_core", u"compound_operator", 
                   u"cte_table_name", u"signed_number", u"literal_value", 
                   u"unary_operator", u"error_message", u"module_argument", 
                   u"column_alias", u"keyword", u"name", u"function_name", 
                   u"database_name", u"table_name", u"table_or_index_name", 
                   u"new_table_name", u"column_name", u"collation_name", 
                   u"foreign_table", u"index_name", u"trigger_name", u"view_name", 
                   u"module_name", u"pragma_name", u"savepoint_name", u"table_alias", 
                   u"transaction_name", u"any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    K_ABORT=25
    K_ACTION=26
    K_ADD=27
    K_AFTER=28
    K_ALL=29
    K_ALTER=30
    K_ANALYZE=31
    K_AND=32
    K_AS=33
    K_ASC=34
    K_ATTACH=35
    K_AUTOINCREMENT=36
    K_BEFORE=37
    K_BEGIN=38
    K_BETWEEN=39
    K_BY=40
    K_CASCADE=41
    K_CASE=42
    K_CAST=43
    K_CHECK=44
    K_COLLATE=45
    K_COLUMN=46
    K_COMMIT=47
    K_CONFLICT=48
    K_CONSTRAINT=49
    K_CREATE=50
    K_CROSS=51
    K_CURRENT_DATE=52
    K_CURRENT_TIME=53
    K_CURRENT_TIMESTAMP=54
    K_DATABASE=55
    K_DEFAULT=56
    K_DEFERRABLE=57
    K_DEFERRED=58
    K_DELETE=59
    K_DESC=60
    K_DETACH=61
    K_DISTINCT=62
    K_DROP=63
    K_EACH=64
    K_ELSE=65
    K_END=66
    K_ESCAPE=67
    K_EXCEPT=68
    K_EXCLUSIVE=69
    K_EXISTS=70
    K_EXPLAIN=71
    K_FAIL=72
    K_FOR=73
    K_FOREIGN=74
    K_FROM=75
    K_FULL=76
    K_GLOB=77
    K_GROUP=78
    K_HAVING=79
    K_IF=80
    K_IGNORE=81
    K_IMMEDIATE=82
    K_IN=83
    K_INDEX=84
    K_INDEXED=85
    K_INITIALLY=86
    K_INNER=87
    K_INSERT=88
    K_INSTEAD=89
    K_INTERSECT=90
    K_INTO=91
    K_IS=92
    K_ISNULL=93
    K_JOIN=94
    K_KEY=95
    K_LEFT=96
    K_LIKE=97
    K_LIMIT=98
    K_MATCH=99
    K_NATURAL=100
    K_NO=101
    K_NOT=102
    K_NOTNULL=103
    K_NULL=104
    K_OF=105
    K_OFFSET=106
    K_ON=107
    K_OR=108
    K_ORDER=109
    K_OUTER=110
    K_PLAN=111
    K_PRAGMA=112
    K_PRIMARY=113
    K_QUERY=114
    K_RAISE=115
    K_RECURSIVE=116
    K_REFERENCES=117
    K_REGEXP=118
    K_REINDEX=119
    K_RELEASE=120
    K_RENAME=121
    K_REPLACE=122
    K_RESTRICT=123
    K_RIGHT=124
    K_ROLLBACK=125
    K_ROW=126
    K_SAVEPOINT=127
    K_SELECT=128
    K_SET=129
    K_TABLE=130
    K_TEMP=131
    K_TEMPORARY=132
    K_THEN=133
    K_TO=134
    K_TRANSACTION=135
    K_TRIGGER=136
    K_UNION=137
    K_UNIQUE=138
    K_UPDATE=139
    K_USING=140
    K_VACUUM=141
    K_VALUES=142
    K_VIEW=143
    K_VIRTUAL=144
    K_WHEN=145
    K_WHERE=146
    K_WITH=147
    K_WITHOUT=148
    IDENTIFIER=149
    NUMERIC_LITERAL=150
    BIND_PARAMETER=151
    STRING_LITERAL=152
    BLOB_LITERAL=153
    SINGLE_LINE_COMMENT=154
    MULTILINE_COMMENT=155
    SPACES=156
    UNEXPECTED_CHAR=157

    def __init__(self, input):
        super(SimpleQLParser, self).__init__(input)
        self.checkVersion("4.6")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ParseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.ParseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SimpleQLParser.EOF, 0)

        def sql_stmt_list(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Sql_stmt_listContext,i)


        def error(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.ErrorContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.ErrorContext,i)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_parse

        def enterRule(self, listener):
            if hasattr(listener, "enterParse"):
                listener.enterParse(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParse"):
                listener.exitParse(self)




    def parse(self):

        localctx = SimpleQLParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SimpleQLParser.SCOL or _la==SimpleQLParser.K_EXPLAIN or _la==SimpleQLParser.K_SELECT or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (SimpleQLParser.K_VALUES - 142)) | (1 << (SimpleQLParser.K_WITH - 142)) | (1 << (SimpleQLParser.UNEXPECTED_CHAR - 142)))) != 0):
                self.state = 110
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SimpleQLParser.SCOL, SimpleQLParser.K_EXPLAIN, SimpleQLParser.K_SELECT, SimpleQLParser.K_VALUES, SimpleQLParser.K_WITH]:
                    self.state = 108
                    self.sql_stmt_list()
                    pass
                elif token in [SimpleQLParser.UNEXPECTED_CHAR]:
                    self.state = 109
                    self.error()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 115
            self.match(SimpleQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ErrorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.ErrorContext, self).__init__(parent, invokingState)
            self.parser = parser
            self._UNEXPECTED_CHAR = None # Token

        def UNEXPECTED_CHAR(self):
            return self.getToken(SimpleQLParser.UNEXPECTED_CHAR, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_error

        def enterRule(self, listener):
            if hasattr(listener, "enterError"):
                listener.enterError(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitError"):
                listener.exitError(self)




    def error(self):

        localctx = SimpleQLParser.ErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_error)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 117
            localctx._UNEXPECTED_CHAR = self.match(SimpleQLParser.UNEXPECTED_CHAR)
            raise Exception("UNEXPECTED_CHAR=" + (None if localctx._UNEXPECTED_CHAR is None else localctx._UNEXPECTED_CHAR.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmt_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Sql_stmt_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Sql_stmtContext,i)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_sql_stmt_list

        def enterRule(self, listener):
            if hasattr(listener, "enterSql_stmt_list"):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSql_stmt_list"):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = SimpleQLParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SimpleQLParser.SCOL:
                self.state = 120
                self.match(SimpleQLParser.SCOL)
                self.state = 125
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 126
            self.sql_stmt()
            self.state = 135
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 128 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 127
                        self.match(SimpleQLParser.SCOL)
                        self.state = 130 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SimpleQLParser.SCOL):
                            break

                    self.state = 132
                    self.sql_stmt() 
                self.state = 137
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 141
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 138
                    self.match(SimpleQLParser.SCOL) 
                self.state = 143
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Sql_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def simple_select_stmt(self):
            return self.getTypedRuleContext(SimpleQLParser.Simple_select_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SimpleQLParser.Select_stmtContext,0)


        def K_EXPLAIN(self):
            return self.getToken(SimpleQLParser.K_EXPLAIN, 0)

        def K_QUERY(self):
            return self.getToken(SimpleQLParser.K_QUERY, 0)

        def K_PLAN(self):
            return self.getToken(SimpleQLParser.K_PLAN, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_sql_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSql_stmt"):
                listener.enterSql_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSql_stmt"):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = SimpleQLParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_EXPLAIN:
                self.state = 144
                self.match(SimpleQLParser.K_EXPLAIN)
                self.state = 147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_QUERY:
                    self.state = 145
                    self.match(SimpleQLParser.K_QUERY)
                    self.state = 146
                    self.match(SimpleQLParser.K_PLAN)




            self.state = 153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 151
                self.simple_select_stmt()
                pass

            elif la_ == 2:
                self.state = 152
                self.select_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Simple_select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SimpleQLParser.Select_coreContext,0)


        def K_WITH(self):
            return self.getToken(SimpleQLParser.K_WITH, 0)

        def common_table_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Common_table_expressionContext,i)


        def K_ORDER(self):
            return self.getToken(SimpleQLParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SimpleQLParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SimpleQLParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.ExprContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SimpleQLParser.K_RECURSIVE, 0)

        def K_OFFSET(self):
            return self.getToken(SimpleQLParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_simple_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSimple_select_stmt"):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimple_select_stmt"):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = SimpleQLParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_WITH:
                self.state = 155
                self.match(SimpleQLParser.K_WITH)
                self.state = 157
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 156
                    self.match(SimpleQLParser.K_RECURSIVE)


                self.state = 159
                self.common_table_expression()
                self.state = 164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 160
                    self.match(SimpleQLParser.COMMA)
                    self.state = 161
                    self.common_table_expression()
                    self.state = 166
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 169
            self.select_core()
            self.state = 180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_ORDER:
                self.state = 170
                self.match(SimpleQLParser.K_ORDER)
                self.state = 171
                self.match(SimpleQLParser.K_BY)
                self.state = 172
                self.ordering_term()
                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 173
                    self.match(SimpleQLParser.COMMA)
                    self.state = 174
                    self.ordering_term()
                    self.state = 179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_LIMIT:
                self.state = 182
                self.match(SimpleQLParser.K_LIMIT)
                self.state = 183
                self.expr(0)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.COMMA or _la==SimpleQLParser.K_OFFSET:
                    self.state = 184
                    _la = self._input.LA(1)
                    if not(_la==SimpleQLParser.COMMA or _la==SimpleQLParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 185
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Select_stmtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Select_or_valuesContext,i)


        def K_WITH(self):
            return self.getToken(SimpleQLParser.K_WITH, 0)

        def common_table_expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Common_table_expressionContext,i)


        def compound_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(SimpleQLParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(SimpleQLParser.K_BY, 0)

        def ordering_term(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(SimpleQLParser.K_LIMIT, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.ExprContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SimpleQLParser.K_RECURSIVE, 0)

        def K_OFFSET(self):
            return self.getToken(SimpleQLParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_select_stmt

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_stmt"):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_stmt"):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SimpleQLParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_WITH:
                self.state = 190
                self.match(SimpleQLParser.K_WITH)
                self.state = 192
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                if la_ == 1:
                    self.state = 191
                    self.match(SimpleQLParser.K_RECURSIVE)


                self.state = 194
                self.common_table_expression()
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 195
                    self.match(SimpleQLParser.COMMA)
                    self.state = 196
                    self.common_table_expression()
                    self.state = 201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 204
            self.select_or_values()
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SimpleQLParser.K_EXCEPT or _la==SimpleQLParser.K_INTERSECT or _la==SimpleQLParser.K_UNION:
                self.state = 205
                self.compound_operator()
                self.state = 206
                self.select_or_values()
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_ORDER:
                self.state = 213
                self.match(SimpleQLParser.K_ORDER)
                self.state = 214
                self.match(SimpleQLParser.K_BY)
                self.state = 215
                self.ordering_term()
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 216
                    self.match(SimpleQLParser.COMMA)
                    self.state = 217
                    self.ordering_term()
                    self.state = 222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_LIMIT:
                self.state = 225
                self.match(SimpleQLParser.K_LIMIT)
                self.state = 226
                self.expr(0)
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.COMMA or _la==SimpleQLParser.K_OFFSET:
                    self.state = 227
                    _la = self._input.LA(1)
                    if not(_la==SimpleQLParser.COMMA or _la==SimpleQLParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 228
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_or_valuesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Select_or_valuesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SimpleQLParser.K_SELECT, 0)

        def result_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Result_columnContext,i)


        def K_FROM(self):
            return self.getToken(SimpleQLParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SimpleQLParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(SimpleQLParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SimpleQLParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(SimpleQLParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SimpleQLParser.K_ALL, 0)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SimpleQLParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(SimpleQLParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SimpleQLParser.K_VALUES, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_select_or_values

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_or_values"):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_or_values"):
                listener.exitSelect_or_values(self)




    def select_or_values(self):

        localctx = SimpleQLParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_select_or_values)
        self._la = 0 # Token type
        try:
            self.state = 307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SimpleQLParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 233
                self.match(SimpleQLParser.K_SELECT)
                self.state = 235
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                if la_ == 1:
                    self.state = 234
                    _la = self._input.LA(1)
                    if not(_la==SimpleQLParser.K_ALL or _la==SimpleQLParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 237
                self.result_column()
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 238
                    self.match(SimpleQLParser.COMMA)
                    self.state = 239
                    self.result_column()
                    self.state = 244
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_FROM:
                    self.state = 245
                    self.match(SimpleQLParser.K_FROM)
                    self.state = 255
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                    if la_ == 1:
                        self.state = 246
                        self.table_or_subquery()
                        self.state = 251
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SimpleQLParser.COMMA:
                            self.state = 247
                            self.match(SimpleQLParser.COMMA)
                            self.state = 248
                            self.table_or_subquery()
                            self.state = 253
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 254
                        self.join_clause()
                        pass




                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_WHERE:
                    self.state = 259
                    self.match(SimpleQLParser.K_WHERE)
                    self.state = 260
                    self.expr(0)


                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_GROUP:
                    self.state = 263
                    self.match(SimpleQLParser.K_GROUP)
                    self.state = 264
                    self.match(SimpleQLParser.K_BY)
                    self.state = 265
                    self.expr(0)
                    self.state = 270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SimpleQLParser.COMMA:
                        self.state = 266
                        self.match(SimpleQLParser.COMMA)
                        self.state = 267
                        self.expr(0)
                        self.state = 272
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SimpleQLParser.K_HAVING:
                        self.state = 273
                        self.match(SimpleQLParser.K_HAVING)
                        self.state = 274
                        self.expr(0)




                pass
            elif token in [SimpleQLParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 279
                self.match(SimpleQLParser.K_VALUES)
                self.state = 280
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 281
                self.expr(0)
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 282
                    self.match(SimpleQLParser.COMMA)
                    self.state = 283
                    self.expr(0)
                    self.state = 288
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 289
                self.match(SimpleQLParser.CLOSE_PAR)
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 290
                    self.match(SimpleQLParser.COMMA)
                    self.state = 291
                    self.match(SimpleQLParser.OPEN_PAR)
                    self.state = 292
                    self.expr(0)
                    self.state = 297
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SimpleQLParser.COMMA:
                        self.state = 293
                        self.match(SimpleQLParser.COMMA)
                        self.state = 294
                        self.expr(0)
                        self.state = 299
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 300
                    self.match(SimpleQLParser.CLOSE_PAR)
                    self.state = 306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_defContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Column_defContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Type_nameContext,0)


        def column_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_column_def

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_def"):
                listener.enterColumn_def(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_def"):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = SimpleQLParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.column_name()
            self.state = 311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 310
                self.type_name()


            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleQLParser.K_CHECK) | (1 << SimpleQLParser.K_COLLATE) | (1 << SimpleQLParser.K_CONSTRAINT) | (1 << SimpleQLParser.K_DEFAULT))) != 0) or ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (SimpleQLParser.K_NOT - 102)) | (1 << (SimpleQLParser.K_NULL - 102)) | (1 << (SimpleQLParser.K_PRIMARY - 102)) | (1 << (SimpleQLParser.K_REFERENCES - 102)) | (1 << (SimpleQLParser.K_UNIQUE - 102)))) != 0):
                self.state = 313
                self.column_constraint()
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Type_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.NameContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.NameContext,i)


        def signed_number(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Signed_numberContext,i)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_type_name

        def enterRule(self, listener):
            if hasattr(listener, "enterType_name"):
                listener.enterType_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitType_name"):
                listener.exitType_name(self)




    def type_name(self):

        localctx = SimpleQLParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 319
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 322 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

            self.state = 334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 324
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 325
                self.signed_number()
                self.state = 326
                self.match(SimpleQLParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 328
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 329
                self.signed_number()
                self.state = 330
                self.match(SimpleQLParser.COMMA)
                self.state = 331
                self.signed_number()
                self.state = 332
                self.match(SimpleQLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Column_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_PRIMARY(self):
            return self.getToken(SimpleQLParser.K_PRIMARY, 0)

        def K_KEY(self):
            return self.getToken(SimpleQLParser.K_KEY, 0)

        def conflict_clause(self):
            return self.getTypedRuleContext(SimpleQLParser.Conflict_clauseContext,0)


        def K_NULL(self):
            return self.getToken(SimpleQLParser.K_NULL, 0)

        def K_UNIQUE(self):
            return self.getToken(SimpleQLParser.K_UNIQUE, 0)

        def K_CHECK(self):
            return self.getToken(SimpleQLParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SimpleQLParser.ExprContext,0)


        def K_DEFAULT(self):
            return self.getToken(SimpleQLParser.K_DEFAULT, 0)

        def K_COLLATE(self):
            return self.getToken(SimpleQLParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SimpleQLParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(SimpleQLParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SimpleQLParser.NameContext,0)


        def signed_number(self):
            return self.getTypedRuleContext(SimpleQLParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SimpleQLParser.Literal_valueContext,0)


        def K_AUTOINCREMENT(self):
            return self.getToken(SimpleQLParser.K_AUTOINCREMENT, 0)

        def K_NOT(self):
            return self.getToken(SimpleQLParser.K_NOT, 0)

        def K_ASC(self):
            return self.getToken(SimpleQLParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SimpleQLParser.K_DESC, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_column_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_constraint"):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_constraint"):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = SimpleQLParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_CONSTRAINT:
                self.state = 336
                self.match(SimpleQLParser.K_CONSTRAINT)
                self.state = 337
                self.name()


            self.state = 373
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SimpleQLParser.K_PRIMARY]:
                self.state = 340
                self.match(SimpleQLParser.K_PRIMARY)
                self.state = 341
                self.match(SimpleQLParser.K_KEY)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_ASC or _la==SimpleQLParser.K_DESC:
                    self.state = 342
                    _la = self._input.LA(1)
                    if not(_la==SimpleQLParser.K_ASC or _la==SimpleQLParser.K_DESC):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 345
                self.conflict_clause()
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_AUTOINCREMENT:
                    self.state = 346
                    self.match(SimpleQLParser.K_AUTOINCREMENT)


                pass
            elif token in [SimpleQLParser.K_NOT, SimpleQLParser.K_NULL]:
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_NOT:
                    self.state = 349
                    self.match(SimpleQLParser.K_NOT)


                self.state = 352
                self.match(SimpleQLParser.K_NULL)
                self.state = 353
                self.conflict_clause()
                pass
            elif token in [SimpleQLParser.K_UNIQUE]:
                self.state = 354
                self.match(SimpleQLParser.K_UNIQUE)
                self.state = 355
                self.conflict_clause()
                pass
            elif token in [SimpleQLParser.K_CHECK]:
                self.state = 356
                self.match(SimpleQLParser.K_CHECK)
                self.state = 357
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 358
                self.expr(0)
                self.state = 359
                self.match(SimpleQLParser.CLOSE_PAR)
                pass
            elif token in [SimpleQLParser.K_DEFAULT]:
                self.state = 361
                self.match(SimpleQLParser.K_DEFAULT)
                self.state = 368
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 362
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 363
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 364
                    self.match(SimpleQLParser.OPEN_PAR)
                    self.state = 365
                    self.expr(0)
                    self.state = 366
                    self.match(SimpleQLParser.CLOSE_PAR)
                    pass


                pass
            elif token in [SimpleQLParser.K_COLLATE]:
                self.state = 370
                self.match(SimpleQLParser.K_COLLATE)
                self.state = 371
                self.collation_name()
                pass
            elif token in [SimpleQLParser.K_REFERENCES]:
                self.state = 372
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Conflict_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Conflict_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SimpleQLParser.K_ON, 0)

        def K_CONFLICT(self):
            return self.getToken(SimpleQLParser.K_CONFLICT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SimpleQLParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SimpleQLParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SimpleQLParser.K_FAIL, 0)

        def K_IGNORE(self):
            return self.getToken(SimpleQLParser.K_IGNORE, 0)

        def K_REPLACE(self):
            return self.getToken(SimpleQLParser.K_REPLACE, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_conflict_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterConflict_clause"):
                listener.enterConflict_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConflict_clause"):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = SimpleQLParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_ON:
                self.state = 375
                self.match(SimpleQLParser.K_ON)
                self.state = 376
                self.match(SimpleQLParser.K_CONFLICT)
                self.state = 377
                _la = self._input.LA(1)
                if not(_la==SimpleQLParser.K_ABORT or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SimpleQLParser.K_FAIL - 72)) | (1 << (SimpleQLParser.K_IGNORE - 72)) | (1 << (SimpleQLParser.K_REPLACE - 72)) | (1 << (SimpleQLParser.K_ROLLBACK - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.ExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SimpleQLParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SimpleQLParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Database_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(SimpleQLParser.Unary_operatorContext,0)


        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Function_nameContext,0)


        def K_DISTINCT(self):
            return self.getToken(SimpleQLParser.K_DISTINCT, 0)

        def K_CAST(self):
            return self.getToken(SimpleQLParser.K_CAST, 0)

        def K_AS(self):
            return self.getToken(SimpleQLParser.K_AS, 0)

        def type_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SimpleQLParser.Select_stmtContext,0)


        def K_EXISTS(self):
            return self.getToken(SimpleQLParser.K_EXISTS, 0)

        def K_NOT(self):
            return self.getToken(SimpleQLParser.K_NOT, 0)

        def K_CASE(self):
            return self.getToken(SimpleQLParser.K_CASE, 0)

        def K_END(self):
            return self.getToken(SimpleQLParser.K_END, 0)

        def K_WHEN(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_WHEN)
            else:
                return self.getToken(SimpleQLParser.K_WHEN, i)

        def K_THEN(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_THEN)
            else:
                return self.getToken(SimpleQLParser.K_THEN, i)

        def K_ELSE(self):
            return self.getToken(SimpleQLParser.K_ELSE, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SimpleQLParser.Raise_functionContext,0)


        def K_IS(self):
            return self.getToken(SimpleQLParser.K_IS, 0)

        def K_IN(self):
            return self.getToken(SimpleQLParser.K_IN, 0)

        def K_LIKE(self):
            return self.getToken(SimpleQLParser.K_LIKE, 0)

        def K_GLOB(self):
            return self.getToken(SimpleQLParser.K_GLOB, 0)

        def K_MATCH(self):
            return self.getToken(SimpleQLParser.K_MATCH, 0)

        def K_REGEXP(self):
            return self.getToken(SimpleQLParser.K_REGEXP, 0)

        def K_AND(self):
            return self.getToken(SimpleQLParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(SimpleQLParser.K_OR, 0)

        def K_BETWEEN(self):
            return self.getToken(SimpleQLParser.K_BETWEEN, 0)

        def K_COLLATE(self):
            return self.getToken(SimpleQLParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Collation_nameContext,0)


        def K_ESCAPE(self):
            return self.getToken(SimpleQLParser.K_ESCAPE, 0)

        def K_ISNULL(self):
            return self.getToken(SimpleQLParser.K_ISNULL, 0)

        def K_NOTNULL(self):
            return self.getToken(SimpleQLParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SimpleQLParser.K_NULL, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_expr

        def enterRule(self, listener):
            if hasattr(listener, "enterExpr"):
                listener.enterExpr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpr"):
                listener.exitExpr(self)



    def expr(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleQLParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 381
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 382
                self.match(SimpleQLParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 386
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        self.state = 383
                        self.database_name()
                        self.state = 384
                        self.match(SimpleQLParser.DOT)


                    self.state = 388
                    self.table_name()
                    self.state = 389
                    self.match(SimpleQLParser.DOT)


                self.state = 393
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 394
                self.unary_operator()
                self.state = 395
                self.expr(21)
                pass

            elif la_ == 5:
                self.state = 397
                self.function_name()
                self.state = 398
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 411
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SimpleQLParser.OPEN_PAR, SimpleQLParser.PLUS, SimpleQLParser.MINUS, SimpleQLParser.TILDE, SimpleQLParser.K_ABORT, SimpleQLParser.K_ACTION, SimpleQLParser.K_ADD, SimpleQLParser.K_AFTER, SimpleQLParser.K_ALL, SimpleQLParser.K_ALTER, SimpleQLParser.K_ANALYZE, SimpleQLParser.K_AND, SimpleQLParser.K_AS, SimpleQLParser.K_ASC, SimpleQLParser.K_ATTACH, SimpleQLParser.K_AUTOINCREMENT, SimpleQLParser.K_BEFORE, SimpleQLParser.K_BEGIN, SimpleQLParser.K_BETWEEN, SimpleQLParser.K_BY, SimpleQLParser.K_CASCADE, SimpleQLParser.K_CASE, SimpleQLParser.K_CAST, SimpleQLParser.K_CHECK, SimpleQLParser.K_COLLATE, SimpleQLParser.K_COLUMN, SimpleQLParser.K_COMMIT, SimpleQLParser.K_CONFLICT, SimpleQLParser.K_CONSTRAINT, SimpleQLParser.K_CREATE, SimpleQLParser.K_CROSS, SimpleQLParser.K_CURRENT_DATE, SimpleQLParser.K_CURRENT_TIME, SimpleQLParser.K_CURRENT_TIMESTAMP, SimpleQLParser.K_DATABASE, SimpleQLParser.K_DEFAULT, SimpleQLParser.K_DEFERRABLE, SimpleQLParser.K_DEFERRED, SimpleQLParser.K_DELETE, SimpleQLParser.K_DESC, SimpleQLParser.K_DETACH, SimpleQLParser.K_DISTINCT, SimpleQLParser.K_DROP, SimpleQLParser.K_EACH, SimpleQLParser.K_ELSE, SimpleQLParser.K_END, SimpleQLParser.K_ESCAPE, SimpleQLParser.K_EXCEPT, SimpleQLParser.K_EXCLUSIVE, SimpleQLParser.K_EXISTS, SimpleQLParser.K_EXPLAIN, SimpleQLParser.K_FAIL, SimpleQLParser.K_FOR, SimpleQLParser.K_FOREIGN, SimpleQLParser.K_FROM, SimpleQLParser.K_FULL, SimpleQLParser.K_GLOB, SimpleQLParser.K_GROUP, SimpleQLParser.K_HAVING, SimpleQLParser.K_IF, SimpleQLParser.K_IGNORE, SimpleQLParser.K_IMMEDIATE, SimpleQLParser.K_IN, SimpleQLParser.K_INDEX, SimpleQLParser.K_INDEXED, SimpleQLParser.K_INITIALLY, SimpleQLParser.K_INNER, SimpleQLParser.K_INSERT, SimpleQLParser.K_INSTEAD, SimpleQLParser.K_INTERSECT, SimpleQLParser.K_INTO, SimpleQLParser.K_IS, SimpleQLParser.K_ISNULL, SimpleQLParser.K_JOIN, SimpleQLParser.K_KEY, SimpleQLParser.K_LEFT, SimpleQLParser.K_LIKE, SimpleQLParser.K_LIMIT, SimpleQLParser.K_MATCH, SimpleQLParser.K_NATURAL, SimpleQLParser.K_NO, SimpleQLParser.K_NOT, SimpleQLParser.K_NOTNULL, SimpleQLParser.K_NULL, SimpleQLParser.K_OF, SimpleQLParser.K_OFFSET, SimpleQLParser.K_ON, SimpleQLParser.K_OR, SimpleQLParser.K_ORDER, SimpleQLParser.K_OUTER, SimpleQLParser.K_PLAN, SimpleQLParser.K_PRAGMA, SimpleQLParser.K_PRIMARY, SimpleQLParser.K_QUERY, SimpleQLParser.K_RAISE, SimpleQLParser.K_RECURSIVE, SimpleQLParser.K_REFERENCES, SimpleQLParser.K_REGEXP, SimpleQLParser.K_REINDEX, SimpleQLParser.K_RELEASE, SimpleQLParser.K_RENAME, SimpleQLParser.K_REPLACE, SimpleQLParser.K_RESTRICT, SimpleQLParser.K_RIGHT, SimpleQLParser.K_ROLLBACK, SimpleQLParser.K_ROW, SimpleQLParser.K_SAVEPOINT, SimpleQLParser.K_SELECT, SimpleQLParser.K_SET, SimpleQLParser.K_TABLE, SimpleQLParser.K_TEMP, SimpleQLParser.K_TEMPORARY, SimpleQLParser.K_THEN, SimpleQLParser.K_TO, SimpleQLParser.K_TRANSACTION, SimpleQLParser.K_TRIGGER, SimpleQLParser.K_UNION, SimpleQLParser.K_UNIQUE, SimpleQLParser.K_UPDATE, SimpleQLParser.K_USING, SimpleQLParser.K_VACUUM, SimpleQLParser.K_VALUES, SimpleQLParser.K_VIEW, SimpleQLParser.K_VIRTUAL, SimpleQLParser.K_WHEN, SimpleQLParser.K_WHERE, SimpleQLParser.K_WITH, SimpleQLParser.K_WITHOUT, SimpleQLParser.IDENTIFIER, SimpleQLParser.NUMERIC_LITERAL, SimpleQLParser.BIND_PARAMETER, SimpleQLParser.STRING_LITERAL, SimpleQLParser.BLOB_LITERAL]:
                    self.state = 400
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                    if la_ == 1:
                        self.state = 399
                        self.match(SimpleQLParser.K_DISTINCT)


                    self.state = 402
                    self.expr(0)
                    self.state = 407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SimpleQLParser.COMMA:
                        self.state = 403
                        self.match(SimpleQLParser.COMMA)
                        self.state = 404
                        self.expr(0)
                        self.state = 409
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SimpleQLParser.STAR]:
                    self.state = 410
                    self.match(SimpleQLParser.STAR)
                    pass
                elif token in [SimpleQLParser.CLOSE_PAR]:
                    pass
                else:
                    raise NoViableAltException(self)
                self.state = 413
                self.match(SimpleQLParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 415
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 416
                self.expr(0)
                self.state = 417
                self.match(SimpleQLParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 419
                self.match(SimpleQLParser.K_CAST)
                self.state = 420
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 421
                self.expr(0)
                self.state = 422
                self.match(SimpleQLParser.K_AS)
                self.state = 423
                self.type_name()
                self.state = 424
                self.match(SimpleQLParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_EXISTS or _la==SimpleQLParser.K_NOT:
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SimpleQLParser.K_NOT:
                        self.state = 426
                        self.match(SimpleQLParser.K_NOT)


                    self.state = 429
                    self.match(SimpleQLParser.K_EXISTS)


                self.state = 432
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 433
                self.select_stmt()
                self.state = 434
                self.match(SimpleQLParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 436
                self.match(SimpleQLParser.K_CASE)
                self.state = 438
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 437
                    self.expr(0)


                self.state = 445 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 440
                    self.match(SimpleQLParser.K_WHEN)
                    self.state = 441
                    self.expr(0)
                    self.state = 442
                    self.match(SimpleQLParser.K_THEN)
                    self.state = 443
                    self.expr(0)
                    self.state = 447 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SimpleQLParser.K_WHEN):
                        break

                self.state = 451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_ELSE:
                    self.state = 449
                    self.match(SimpleQLParser.K_ELSE)
                    self.state = 450
                    self.expr(0)


                self.state = 453
                self.match(SimpleQLParser.K_END)
                pass

            elif la_ == 10:
                self.state = 455
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 558
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 556
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                    if la_ == 1:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 458
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 459
                        self.match(SimpleQLParser.PIPE2)
                        self.state = 460
                        self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 461
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 462
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleQLParser.STAR) | (1 << SimpleQLParser.DIV) | (1 << SimpleQLParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 463
                        self.expr(20)
                        pass

                    elif la_ == 3:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 464
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 465
                        _la = self._input.LA(1)
                        if not(_la==SimpleQLParser.PLUS or _la==SimpleQLParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 466
                        self.expr(19)
                        pass

                    elif la_ == 4:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 467
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 468
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleQLParser.LT2) | (1 << SimpleQLParser.GT2) | (1 << SimpleQLParser.AMP) | (1 << SimpleQLParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 469
                        self.expr(18)
                        pass

                    elif la_ == 5:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 470
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 471
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleQLParser.LT) | (1 << SimpleQLParser.LT_EQ) | (1 << SimpleQLParser.GT) | (1 << SimpleQLParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 472
                        self.expr(17)
                        pass

                    elif la_ == 6:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 473
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 486
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                        if la_ == 1:
                            self.state = 474
                            self.match(SimpleQLParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 475
                            self.match(SimpleQLParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 476
                            self.match(SimpleQLParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 477
                            self.match(SimpleQLParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 478
                            self.match(SimpleQLParser.K_IS)
                            pass

                        elif la_ == 6:
                            self.state = 479
                            self.match(SimpleQLParser.K_IS)
                            self.state = 480
                            self.match(SimpleQLParser.K_NOT)
                            pass

                        elif la_ == 7:
                            self.state = 481
                            self.match(SimpleQLParser.K_IN)
                            pass

                        elif la_ == 8:
                            self.state = 482
                            self.match(SimpleQLParser.K_LIKE)
                            pass

                        elif la_ == 9:
                            self.state = 483
                            self.match(SimpleQLParser.K_GLOB)
                            pass

                        elif la_ == 10:
                            self.state = 484
                            self.match(SimpleQLParser.K_MATCH)
                            pass

                        elif la_ == 11:
                            self.state = 485
                            self.match(SimpleQLParser.K_REGEXP)
                            pass


                        self.state = 488
                        self.expr(16)
                        pass

                    elif la_ == 7:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 489
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 490
                        self.match(SimpleQLParser.K_AND)
                        self.state = 491
                        self.expr(15)
                        pass

                    elif la_ == 8:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 492
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 493
                        self.match(SimpleQLParser.K_OR)
                        self.state = 494
                        self.expr(14)
                        pass

                    elif la_ == 9:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 495
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 496
                        self.match(SimpleQLParser.K_IS)
                        self.state = 498
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                        if la_ == 1:
                            self.state = 497
                            self.match(SimpleQLParser.K_NOT)


                        self.state = 500
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 501
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 503
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SimpleQLParser.K_NOT:
                            self.state = 502
                            self.match(SimpleQLParser.K_NOT)


                        self.state = 505
                        self.match(SimpleQLParser.K_BETWEEN)
                        self.state = 506
                        self.expr(0)
                        self.state = 507
                        self.match(SimpleQLParser.K_AND)
                        self.state = 508
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 510
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 511
                        self.match(SimpleQLParser.K_COLLATE)
                        self.state = 512
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 513
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 515
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SimpleQLParser.K_NOT:
                            self.state = 514
                            self.match(SimpleQLParser.K_NOT)


                        self.state = 517
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (SimpleQLParser.K_GLOB - 77)) | (1 << (SimpleQLParser.K_LIKE - 77)) | (1 << (SimpleQLParser.K_MATCH - 77)) | (1 << (SimpleQLParser.K_REGEXP - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 518
                        self.expr(0)
                        self.state = 521
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                        if la_ == 1:
                            self.state = 519
                            self.match(SimpleQLParser.K_ESCAPE)
                            self.state = 520
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 523
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 528
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SimpleQLParser.K_ISNULL]:
                            self.state = 524
                            self.match(SimpleQLParser.K_ISNULL)
                            pass
                        elif token in [SimpleQLParser.K_NOTNULL]:
                            self.state = 525
                            self.match(SimpleQLParser.K_NOTNULL)
                            pass
                        elif token in [SimpleQLParser.K_NOT]:
                            self.state = 526
                            self.match(SimpleQLParser.K_NOT)
                            self.state = 527
                            self.match(SimpleQLParser.K_NULL)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SimpleQLParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 530
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 532
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SimpleQLParser.K_NOT:
                            self.state = 531
                            self.match(SimpleQLParser.K_NOT)


                        self.state = 534
                        self.match(SimpleQLParser.K_IN)
                        self.state = 554
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                        if la_ == 1:
                            self.state = 535
                            self.match(SimpleQLParser.OPEN_PAR)
                            self.state = 545
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                            if la_ == 1:
                                self.state = 536
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 537
                                self.expr(0)
                                self.state = 542
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SimpleQLParser.COMMA:
                                    self.state = 538
                                    self.match(SimpleQLParser.COMMA)
                                    self.state = 539
                                    self.expr(0)
                                    self.state = 544
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 547
                            self.match(SimpleQLParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 551
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                            if la_ == 1:
                                self.state = 548
                                self.database_name()
                                self.state = 549
                                self.match(SimpleQLParser.DOT)


                            self.state = 553
                            self.table_name()
                            pass


                        pass

             
                self.state = 560
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Foreign_key_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_REFERENCES(self):
            return self.getToken(SimpleQLParser.K_REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SimpleQLParser.Foreign_tableContext,0)


        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Column_nameContext,i)


        def K_DEFERRABLE(self):
            return self.getToken(SimpleQLParser.K_DEFERRABLE, 0)

        def K_ON(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_ON)
            else:
                return self.getToken(SimpleQLParser.K_ON, i)

        def K_MATCH(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_MATCH)
            else:
                return self.getToken(SimpleQLParser.K_MATCH, i)

        def name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.NameContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.NameContext,i)


        def K_DELETE(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_DELETE)
            else:
                return self.getToken(SimpleQLParser.K_DELETE, i)

        def K_UPDATE(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_UPDATE)
            else:
                return self.getToken(SimpleQLParser.K_UPDATE, i)

        def K_NOT(self):
            return self.getToken(SimpleQLParser.K_NOT, 0)

        def K_INITIALLY(self):
            return self.getToken(SimpleQLParser.K_INITIALLY, 0)

        def K_DEFERRED(self):
            return self.getToken(SimpleQLParser.K_DEFERRED, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SimpleQLParser.K_IMMEDIATE, 0)

        def K_SET(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_SET)
            else:
                return self.getToken(SimpleQLParser.K_SET, i)

        def K_NULL(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_NULL)
            else:
                return self.getToken(SimpleQLParser.K_NULL, i)

        def K_DEFAULT(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_DEFAULT)
            else:
                return self.getToken(SimpleQLParser.K_DEFAULT, i)

        def K_CASCADE(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_CASCADE)
            else:
                return self.getToken(SimpleQLParser.K_CASCADE, i)

        def K_RESTRICT(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_RESTRICT)
            else:
                return self.getToken(SimpleQLParser.K_RESTRICT, i)

        def K_NO(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_NO)
            else:
                return self.getToken(SimpleQLParser.K_NO, i)

        def K_ACTION(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_ACTION)
            else:
                return self.getToken(SimpleQLParser.K_ACTION, i)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_foreign_key_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterForeign_key_clause"):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForeign_key_clause"):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = SimpleQLParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(SimpleQLParser.K_REFERENCES)
            self.state = 562
            self.foreign_table()
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.OPEN_PAR:
                self.state = 563
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 564
                self.column_name()
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 565
                    self.match(SimpleQLParser.COMMA)
                    self.state = 566
                    self.column_name()
                    self.state = 571
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 572
                self.match(SimpleQLParser.CLOSE_PAR)


            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SimpleQLParser.K_MATCH or _la==SimpleQLParser.K_ON:
                self.state = 590
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SimpleQLParser.K_ON]:
                    self.state = 576
                    self.match(SimpleQLParser.K_ON)
                    self.state = 577
                    _la = self._input.LA(1)
                    if not(_la==SimpleQLParser.K_DELETE or _la==SimpleQLParser.K_UPDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 586
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                    if la_ == 1:
                        self.state = 578
                        self.match(SimpleQLParser.K_SET)
                        self.state = 579
                        self.match(SimpleQLParser.K_NULL)
                        pass

                    elif la_ == 2:
                        self.state = 580
                        self.match(SimpleQLParser.K_SET)
                        self.state = 581
                        self.match(SimpleQLParser.K_DEFAULT)
                        pass

                    elif la_ == 3:
                        self.state = 582
                        self.match(SimpleQLParser.K_CASCADE)
                        pass

                    elif la_ == 4:
                        self.state = 583
                        self.match(SimpleQLParser.K_RESTRICT)
                        pass

                    elif la_ == 5:
                        self.state = 584
                        self.match(SimpleQLParser.K_NO)
                        self.state = 585
                        self.match(SimpleQLParser.K_ACTION)
                        pass


                    pass
                elif token in [SimpleQLParser.K_MATCH]:
                    self.state = 588
                    self.match(SimpleQLParser.K_MATCH)
                    self.state = 589
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_NOT:
                    self.state = 597
                    self.match(SimpleQLParser.K_NOT)


                self.state = 600
                self.match(SimpleQLParser.K_DEFERRABLE)
                self.state = 605
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 601
                    self.match(SimpleQLParser.K_INITIALLY)
                    self.state = 602
                    self.match(SimpleQLParser.K_DEFERRED)

                elif la_ == 2:
                    self.state = 603
                    self.match(SimpleQLParser.K_INITIALLY)
                    self.state = 604
                    self.match(SimpleQLParser.K_IMMEDIATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Raise_functionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Raise_functionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_RAISE(self):
            return self.getToken(SimpleQLParser.K_RAISE, 0)

        def K_IGNORE(self):
            return self.getToken(SimpleQLParser.K_IGNORE, 0)

        def error_message(self):
            return self.getTypedRuleContext(SimpleQLParser.Error_messageContext,0)


        def K_ROLLBACK(self):
            return self.getToken(SimpleQLParser.K_ROLLBACK, 0)

        def K_ABORT(self):
            return self.getToken(SimpleQLParser.K_ABORT, 0)

        def K_FAIL(self):
            return self.getToken(SimpleQLParser.K_FAIL, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_raise_function

        def enterRule(self, listener):
            if hasattr(listener, "enterRaise_function"):
                listener.enterRaise_function(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRaise_function"):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = SimpleQLParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self.match(SimpleQLParser.K_RAISE)
            self.state = 610
            self.match(SimpleQLParser.OPEN_PAR)
            self.state = 615
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SimpleQLParser.K_IGNORE]:
                self.state = 611
                self.match(SimpleQLParser.K_IGNORE)
                pass
            elif token in [SimpleQLParser.K_ABORT, SimpleQLParser.K_FAIL, SimpleQLParser.K_ROLLBACK]:
                self.state = 612
                _la = self._input.LA(1)
                if not(_la==SimpleQLParser.K_ABORT or _la==SimpleQLParser.K_FAIL or _la==SimpleQLParser.K_ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 613
                self.match(SimpleQLParser.COMMA)
                self.state = 614
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 617
            self.match(SimpleQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indexed_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Indexed_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Column_nameContext,0)


        def K_COLLATE(self):
            return self.getToken(SimpleQLParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(SimpleQLParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SimpleQLParser.K_DESC, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_indexed_column

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexed_column"):
                listener.enterIndexed_column(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexed_column"):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = SimpleQLParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.column_name()
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_COLLATE:
                self.state = 620
                self.match(SimpleQLParser.K_COLLATE)
                self.state = 621
                self.collation_name()


            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_ASC or _la==SimpleQLParser.K_DESC:
                self.state = 624
                _la = self._input.LA(1)
                if not(_la==SimpleQLParser.K_ASC or _la==SimpleQLParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Table_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def indexed_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Indexed_columnContext,i)


        def conflict_clause(self):
            return self.getTypedRuleContext(SimpleQLParser.Conflict_clauseContext,0)


        def K_CHECK(self):
            return self.getToken(SimpleQLParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SimpleQLParser.ExprContext,0)


        def K_FOREIGN(self):
            return self.getToken(SimpleQLParser.K_FOREIGN, 0)

        def K_KEY(self):
            return self.getToken(SimpleQLParser.K_KEY, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SimpleQLParser.Foreign_key_clauseContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(SimpleQLParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SimpleQLParser.NameContext,0)


        def K_PRIMARY(self):
            return self.getToken(SimpleQLParser.K_PRIMARY, 0)

        def K_UNIQUE(self):
            return self.getToken(SimpleQLParser.K_UNIQUE, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_table_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_constraint"):
                listener.enterTable_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_constraint"):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = SimpleQLParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_CONSTRAINT:
                self.state = 627
                self.match(SimpleQLParser.K_CONSTRAINT)
                self.state = 628
                self.name()


            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SimpleQLParser.K_PRIMARY, SimpleQLParser.K_UNIQUE]:
                self.state = 634
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SimpleQLParser.K_PRIMARY]:
                    self.state = 631
                    self.match(SimpleQLParser.K_PRIMARY)
                    self.state = 632
                    self.match(SimpleQLParser.K_KEY)
                    pass
                elif token in [SimpleQLParser.K_UNIQUE]:
                    self.state = 633
                    self.match(SimpleQLParser.K_UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 636
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 637
                self.indexed_column()
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 638
                    self.match(SimpleQLParser.COMMA)
                    self.state = 639
                    self.indexed_column()
                    self.state = 644
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 645
                self.match(SimpleQLParser.CLOSE_PAR)
                self.state = 646
                self.conflict_clause()
                pass
            elif token in [SimpleQLParser.K_CHECK]:
                self.state = 648
                self.match(SimpleQLParser.K_CHECK)
                self.state = 649
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 650
                self.expr(0)
                self.state = 651
                self.match(SimpleQLParser.CLOSE_PAR)
                pass
            elif token in [SimpleQLParser.K_FOREIGN]:
                self.state = 653
                self.match(SimpleQLParser.K_FOREIGN)
                self.state = 654
                self.match(SimpleQLParser.K_KEY)
                self.state = 655
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 656
                self.column_name()
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 657
                    self.match(SimpleQLParser.COMMA)
                    self.state = 658
                    self.column_name()
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 664
                self.match(SimpleQLParser.CLOSE_PAR)
                self.state = 665
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class With_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.With_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_WITH(self):
            return self.getToken(SimpleQLParser.K_WITH, 0)

        def cte_table_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Cte_table_nameContext,i)


        def K_AS(self, i=None):
            if i is None:
                return self.getTokens(SimpleQLParser.K_AS)
            else:
                return self.getToken(SimpleQLParser.K_AS, i)

        def select_stmt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Select_stmtContext,i)


        def K_RECURSIVE(self):
            return self.getToken(SimpleQLParser.K_RECURSIVE, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_with_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterWith_clause"):
                listener.enterWith_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWith_clause"):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = SimpleQLParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(SimpleQLParser.K_WITH)
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 670
                self.match(SimpleQLParser.K_RECURSIVE)


            self.state = 673
            self.cte_table_name()
            self.state = 674
            self.match(SimpleQLParser.K_AS)
            self.state = 675
            self.match(SimpleQLParser.OPEN_PAR)
            self.state = 676
            self.select_stmt()
            self.state = 677
            self.match(SimpleQLParser.CLOSE_PAR)
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SimpleQLParser.COMMA:
                self.state = 678
                self.match(SimpleQLParser.COMMA)
                self.state = 679
                self.cte_table_name()
                self.state = 680
                self.match(SimpleQLParser.K_AS)
                self.state = 681
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 682
                self.select_stmt()
                self.state = 683
                self.match(SimpleQLParser.CLOSE_PAR)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Qualified_table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Database_nameContext,0)


        def K_INDEXED(self):
            return self.getToken(SimpleQLParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SimpleQLParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(SimpleQLParser.K_NOT, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_qualified_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterQualified_table_name"):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualified_table_name"):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = SimpleQLParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_qualified_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 690
                self.database_name()
                self.state = 691
                self.match(SimpleQLParser.DOT)


            self.state = 695
            self.table_name()
            self.state = 701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SimpleQLParser.K_INDEXED]:
                self.state = 696
                self.match(SimpleQLParser.K_INDEXED)
                self.state = 697
                self.match(SimpleQLParser.K_BY)
                self.state = 698
                self.index_name()
                pass
            elif token in [SimpleQLParser.K_NOT]:
                self.state = 699
                self.match(SimpleQLParser.K_NOT)
                self.state = 700
                self.match(SimpleQLParser.K_INDEXED)
                pass
            elif token in [SimpleQLParser.EOF]:
                pass
            else:
                raise NoViableAltException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Ordering_termContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SimpleQLParser.ExprContext,0)


        def K_COLLATE(self):
            return self.getToken(SimpleQLParser.K_COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Collation_nameContext,0)


        def K_ASC(self):
            return self.getToken(SimpleQLParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(SimpleQLParser.K_DESC, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_ordering_term

        def enterRule(self, listener):
            if hasattr(listener, "enterOrdering_term"):
                listener.enterOrdering_term(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrdering_term"):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = SimpleQLParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.expr(0)
            self.state = 706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_COLLATE:
                self.state = 704
                self.match(SimpleQLParser.K_COLLATE)
                self.state = 705
                self.collation_name()


            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.K_ASC or _la==SimpleQLParser.K_DESC:
                self.state = 708
                _la = self._input.LA(1)
                if not(_la==SimpleQLParser.K_ASC or _la==SimpleQLParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Pragma_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SimpleQLParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SimpleQLParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SimpleQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_pragma_value

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_value"):
                listener.enterPragma_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_value"):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = SimpleQLParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pragma_value)
        try:
            self.state = 714
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 711
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 712
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 713
                self.match(SimpleQLParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Common_table_expressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Table_nameContext,0)


        def K_AS(self):
            return self.getToken(SimpleQLParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SimpleQLParser.Select_stmtContext,0)


        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_common_table_expression

        def enterRule(self, listener):
            if hasattr(listener, "enterCommon_table_expression"):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommon_table_expression"):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SimpleQLParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.table_name()
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.OPEN_PAR:
                self.state = 717
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 718
                self.column_name()
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 719
                    self.match(SimpleQLParser.COMMA)
                    self.state = 720
                    self.column_name()
                    self.state = 725
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 726
                self.match(SimpleQLParser.CLOSE_PAR)


            self.state = 730
            self.match(SimpleQLParser.K_AS)
            self.state = 731
            self.match(SimpleQLParser.OPEN_PAR)
            self.state = 732
            self.select_stmt()
            self.state = 733
            self.match(SimpleQLParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Result_columnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Table_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(SimpleQLParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SimpleQLParser.Column_aliasContext,0)


        def K_AS(self):
            return self.getToken(SimpleQLParser.K_AS, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_result_column

        def enterRule(self, listener):
            if hasattr(listener, "enterResult_column"):
                listener.enterResult_column(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitResult_column"):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = SimpleQLParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self.match(SimpleQLParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 736
                self.table_name()
                self.state = 737
                self.match(SimpleQLParser.DOT)
                self.state = 738
                self.match(SimpleQLParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 740
                self.expr(0)
                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_AS or _la==SimpleQLParser.IDENTIFIER or _la==SimpleQLParser.STRING_LITERAL:
                    self.state = 742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SimpleQLParser.K_AS:
                        self.state = 741
                        self.match(SimpleQLParser.K_AS)


                    self.state = 744
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Table_or_subqueryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Table_nameContext,0)


        def database_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Database_nameContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(SimpleQLParser.Table_aliasContext,0)


        def K_INDEXED(self):
            return self.getToken(SimpleQLParser.K_INDEXED, 0)

        def K_BY(self):
            return self.getToken(SimpleQLParser.K_BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Index_nameContext,0)


        def K_NOT(self):
            return self.getToken(SimpleQLParser.K_NOT, 0)

        def K_AS(self):
            return self.getToken(SimpleQLParser.K_AS, 0)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SimpleQLParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SimpleQLParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_table_or_subquery

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_or_subquery"):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_or_subquery"):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = SimpleQLParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 749
                    self.database_name()
                    self.state = 750
                    self.match(SimpleQLParser.DOT)


                self.state = 754
                self.table_name()
                self.state = 759
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 756
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                    if la_ == 1:
                        self.state = 755
                        self.match(SimpleQLParser.K_AS)


                    self.state = 758
                    self.table_alias()


                self.state = 766
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SimpleQLParser.K_INDEXED]:
                    self.state = 761
                    self.match(SimpleQLParser.K_INDEXED)
                    self.state = 762
                    self.match(SimpleQLParser.K_BY)
                    self.state = 763
                    self.index_name()
                    pass
                elif token in [SimpleQLParser.K_NOT]:
                    self.state = 764
                    self.match(SimpleQLParser.K_NOT)
                    self.state = 765
                    self.match(SimpleQLParser.K_INDEXED)
                    pass
                elif token in [SimpleQLParser.EOF, SimpleQLParser.SCOL, SimpleQLParser.CLOSE_PAR, SimpleQLParser.COMMA, SimpleQLParser.K_CROSS, SimpleQLParser.K_EXCEPT, SimpleQLParser.K_EXPLAIN, SimpleQLParser.K_GROUP, SimpleQLParser.K_INNER, SimpleQLParser.K_INTERSECT, SimpleQLParser.K_JOIN, SimpleQLParser.K_LEFT, SimpleQLParser.K_LIMIT, SimpleQLParser.K_NATURAL, SimpleQLParser.K_ON, SimpleQLParser.K_ORDER, SimpleQLParser.K_SELECT, SimpleQLParser.K_UNION, SimpleQLParser.K_USING, SimpleQLParser.K_VALUES, SimpleQLParser.K_WHERE, SimpleQLParser.K_WITH, SimpleQLParser.UNEXPECTED_CHAR]:
                    pass
                else:
                    raise NoViableAltException(self)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 768
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 778
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 769
                    self.table_or_subquery()
                    self.state = 774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SimpleQLParser.COMMA:
                        self.state = 770
                        self.match(SimpleQLParser.COMMA)
                        self.state = 771
                        self.table_or_subquery()
                        self.state = 776
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 777
                    self.join_clause()
                    pass


                self.state = 780
                self.match(SimpleQLParser.CLOSE_PAR)
                self.state = 785
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 782
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                    if la_ == 1:
                        self.state = 781
                        self.match(SimpleQLParser.K_AS)


                    self.state = 784
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 787
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 788
                self.select_stmt()
                self.state = 789
                self.match(SimpleQLParser.CLOSE_PAR)
                self.state = 794
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 791
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                    if la_ == 1:
                        self.state = 790
                        self.match(SimpleQLParser.K_AS)


                    self.state = 793
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Join_clauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Table_or_subqueryContext,i)


        def join_operator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Join_operatorContext,i)


        def join_constraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_join_clause

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_clause"):
                listener.enterJoin_clause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_clause"):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SimpleQLParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.table_or_subquery()
            self.state = 805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SimpleQLParser.COMMA or _la==SimpleQLParser.K_CROSS or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (SimpleQLParser.K_INNER - 87)) | (1 << (SimpleQLParser.K_JOIN - 87)) | (1 << (SimpleQLParser.K_LEFT - 87)) | (1 << (SimpleQLParser.K_NATURAL - 87)))) != 0):
                self.state = 799
                self.join_operator()
                self.state = 800
                self.table_or_subquery()
                self.state = 801
                self.join_constraint()
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Join_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_JOIN(self):
            return self.getToken(SimpleQLParser.K_JOIN, 0)

        def K_NATURAL(self):
            return self.getToken(SimpleQLParser.K_NATURAL, 0)

        def K_LEFT(self):
            return self.getToken(SimpleQLParser.K_LEFT, 0)

        def K_INNER(self):
            return self.getToken(SimpleQLParser.K_INNER, 0)

        def K_CROSS(self):
            return self.getToken(SimpleQLParser.K_CROSS, 0)

        def K_OUTER(self):
            return self.getToken(SimpleQLParser.K_OUTER, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_join_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_operator"):
                listener.enterJoin_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_operator"):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = SimpleQLParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 821
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SimpleQLParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 808
                self.match(SimpleQLParser.COMMA)
                pass
            elif token in [SimpleQLParser.K_CROSS, SimpleQLParser.K_INNER, SimpleQLParser.K_JOIN, SimpleQLParser.K_LEFT, SimpleQLParser.K_NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_NATURAL:
                    self.state = 809
                    self.match(SimpleQLParser.K_NATURAL)


                self.state = 818
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SimpleQLParser.K_LEFT]:
                    self.state = 812
                    self.match(SimpleQLParser.K_LEFT)
                    self.state = 814
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SimpleQLParser.K_OUTER:
                        self.state = 813
                        self.match(SimpleQLParser.K_OUTER)


                    pass
                elif token in [SimpleQLParser.K_INNER]:
                    self.state = 816
                    self.match(SimpleQLParser.K_INNER)
                    pass
                elif token in [SimpleQLParser.K_CROSS]:
                    self.state = 817
                    self.match(SimpleQLParser.K_CROSS)
                    pass
                elif token in [SimpleQLParser.K_JOIN]:
                    pass
                else:
                    raise NoViableAltException(self)
                self.state = 820
                self.match(SimpleQLParser.K_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Join_constraintContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(SimpleQLParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SimpleQLParser.ExprContext,0)


        def K_USING(self):
            return self.getToken(SimpleQLParser.K_USING, 0)

        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_join_constraint

        def enterRule(self, listener):
            if hasattr(listener, "enterJoin_constraint"):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitJoin_constraint"):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = SimpleQLParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SimpleQLParser.K_ON]:
                self.state = 823
                self.match(SimpleQLParser.K_ON)
                self.state = 824
                self.expr(0)
                pass
            elif token in [SimpleQLParser.K_USING]:
                self.state = 825
                self.match(SimpleQLParser.K_USING)
                self.state = 826
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 827
                self.column_name()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 828
                    self.match(SimpleQLParser.COMMA)
                    self.state = 829
                    self.column_name()
                    self.state = 834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 835
                self.match(SimpleQLParser.CLOSE_PAR)
                pass
            elif token in [SimpleQLParser.EOF, SimpleQLParser.SCOL, SimpleQLParser.CLOSE_PAR, SimpleQLParser.COMMA, SimpleQLParser.K_CROSS, SimpleQLParser.K_EXCEPT, SimpleQLParser.K_EXPLAIN, SimpleQLParser.K_GROUP, SimpleQLParser.K_INNER, SimpleQLParser.K_INTERSECT, SimpleQLParser.K_JOIN, SimpleQLParser.K_LEFT, SimpleQLParser.K_LIMIT, SimpleQLParser.K_NATURAL, SimpleQLParser.K_ORDER, SimpleQLParser.K_SELECT, SimpleQLParser.K_UNION, SimpleQLParser.K_VALUES, SimpleQLParser.K_WHERE, SimpleQLParser.K_WITH, SimpleQLParser.UNEXPECTED_CHAR]:
                pass
            else:
                raise NoViableAltException(self)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_coreContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Select_coreContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(SimpleQLParser.K_SELECT, 0)

        def result_column(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Result_columnContext,i)


        def K_FROM(self):
            return self.getToken(SimpleQLParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(SimpleQLParser.K_WHERE, 0)

        def expr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.ExprContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(SimpleQLParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(SimpleQLParser.K_BY, 0)

        def K_DISTINCT(self):
            return self.getToken(SimpleQLParser.K_DISTINCT, 0)

        def K_ALL(self):
            return self.getToken(SimpleQLParser.K_ALL, 0)

        def table_or_subquery(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SimpleQLParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(SimpleQLParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(SimpleQLParser.K_VALUES, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_select_core

        def enterRule(self, listener):
            if hasattr(listener, "enterSelect_core"):
                listener.enterSelect_core(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelect_core"):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = SimpleQLParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 913
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SimpleQLParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 839
                self.match(SimpleQLParser.K_SELECT)
                self.state = 841
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 840
                    _la = self._input.LA(1)
                    if not(_la==SimpleQLParser.K_ALL or _la==SimpleQLParser.K_DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 843
                self.result_column()
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 844
                    self.match(SimpleQLParser.COMMA)
                    self.state = 845
                    self.result_column()
                    self.state = 850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_FROM:
                    self.state = 851
                    self.match(SimpleQLParser.K_FROM)
                    self.state = 861
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                    if la_ == 1:
                        self.state = 852
                        self.table_or_subquery()
                        self.state = 857
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SimpleQLParser.COMMA:
                            self.state = 853
                            self.match(SimpleQLParser.COMMA)
                            self.state = 854
                            self.table_or_subquery()
                            self.state = 859
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 860
                        self.join_clause()
                        pass




                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_WHERE:
                    self.state = 865
                    self.match(SimpleQLParser.K_WHERE)
                    self.state = 866
                    self.expr(0)


                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SimpleQLParser.K_GROUP:
                    self.state = 869
                    self.match(SimpleQLParser.K_GROUP)
                    self.state = 870
                    self.match(SimpleQLParser.K_BY)
                    self.state = 871
                    self.expr(0)
                    self.state = 876
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SimpleQLParser.COMMA:
                        self.state = 872
                        self.match(SimpleQLParser.COMMA)
                        self.state = 873
                        self.expr(0)
                        self.state = 878
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 881
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SimpleQLParser.K_HAVING:
                        self.state = 879
                        self.match(SimpleQLParser.K_HAVING)
                        self.state = 880
                        self.expr(0)




                pass
            elif token in [SimpleQLParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 885
                self.match(SimpleQLParser.K_VALUES)
                self.state = 886
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 887
                self.expr(0)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 888
                    self.match(SimpleQLParser.COMMA)
                    self.state = 889
                    self.expr(0)
                    self.state = 894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 895
                self.match(SimpleQLParser.CLOSE_PAR)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 896
                    self.match(SimpleQLParser.COMMA)
                    self.state = 897
                    self.match(SimpleQLParser.OPEN_PAR)
                    self.state = 898
                    self.expr(0)
                    self.state = 903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SimpleQLParser.COMMA:
                        self.state = 899
                        self.match(SimpleQLParser.COMMA)
                        self.state = 900
                        self.expr(0)
                        self.state = 905
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 906
                    self.match(SimpleQLParser.CLOSE_PAR)
                    self.state = 912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Compound_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(SimpleQLParser.K_UNION, 0)

        def K_ALL(self):
            return self.getToken(SimpleQLParser.K_ALL, 0)

        def K_INTERSECT(self):
            return self.getToken(SimpleQLParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(SimpleQLParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_compound_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterCompound_operator"):
                listener.enterCompound_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompound_operator"):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = SimpleQLParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_compound_operator)
        try:
            self.state = 920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 915
                self.match(SimpleQLParser.K_UNION)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 916
                self.match(SimpleQLParser.K_UNION)
                self.state = 917
                self.match(SimpleQLParser.K_ALL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 918
                self.match(SimpleQLParser.K_INTERSECT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 919
                self.match(SimpleQLParser.K_EXCEPT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cte_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Cte_table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Table_nameContext,0)


        def column_name(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleQLParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SimpleQLParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_cte_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterCte_table_name"):
                listener.enterCte_table_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCte_table_name"):
                listener.exitCte_table_name(self)




    def cte_table_name(self):

        localctx = SimpleQLParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_cte_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.table_name()
            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.OPEN_PAR:
                self.state = 923
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 924
                self.column_name()
                self.state = 929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SimpleQLParser.COMMA:
                    self.state = 925
                    self.match(SimpleQLParser.COMMA)
                    self.state = 926
                    self.column_name()
                    self.state = 931
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 932
                self.match(SimpleQLParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Signed_numberContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SimpleQLParser.NUMERIC_LITERAL, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_signed_number

        def enterRule(self, listener):
            if hasattr(listener, "enterSigned_number"):
                listener.enterSigned_number(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSigned_number"):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = SimpleQLParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SimpleQLParser.PLUS or _la==SimpleQLParser.MINUS:
                self.state = 936
                _la = self._input.LA(1)
                if not(_la==SimpleQLParser.PLUS or _la==SimpleQLParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 939
            self.match(SimpleQLParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Literal_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SimpleQLParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SimpleQLParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SimpleQLParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(SimpleQLParser.K_NULL, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SimpleQLParser.K_CURRENT_TIME, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SimpleQLParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SimpleQLParser.K_CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_literal_value

        def enterRule(self, listener):
            if hasattr(listener, "enterLiteral_value"):
                listener.enterLiteral_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLiteral_value"):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = SimpleQLParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 941
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleQLParser.K_CURRENT_DATE) | (1 << SimpleQLParser.K_CURRENT_TIME) | (1 << SimpleQLParser.K_CURRENT_TIMESTAMP))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (SimpleQLParser.K_NULL - 104)) | (1 << (SimpleQLParser.NUMERIC_LITERAL - 104)) | (1 << (SimpleQLParser.STRING_LITERAL - 104)) | (1 << (SimpleQLParser.BLOB_LITERAL - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Unary_operatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_NOT(self):
            return self.getToken(SimpleQLParser.K_NOT, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_unary_operator

        def enterRule(self, listener):
            if hasattr(listener, "enterUnary_operator"):
                listener.enterUnary_operator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnary_operator"):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = SimpleQLParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SimpleQLParser.PLUS) | (1 << SimpleQLParser.MINUS) | (1 << SimpleQLParser.TILDE))) != 0) or _la==SimpleQLParser.K_NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_messageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Error_messageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SimpleQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_error_message

        def enterRule(self, listener):
            if hasattr(listener, "enterError_message"):
                listener.enterError_message(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitError_message"):
                listener.exitError_message(self)




    def error_message(self):

        localctx = SimpleQLParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.match(SimpleQLParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Module_argumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SimpleQLParser.ExprContext,0)


        def column_def(self):
            return self.getTypedRuleContext(SimpleQLParser.Column_defContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_module_argument

        def enterRule(self, listener):
            if hasattr(listener, "enterModule_argument"):
                listener.enterModule_argument(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitModule_argument"):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = SimpleQLParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_module_argument)
        try:
            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 947
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 948
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Column_aliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SimpleQLParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SimpleQLParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_column_alias

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_alias"):
                listener.enterColumn_alias(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_alias"):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = SimpleQLParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            _la = self._input.LA(1)
            if not(_la==SimpleQLParser.IDENTIFIER or _la==SimpleQLParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.KeywordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def K_ABORT(self):
            return self.getToken(SimpleQLParser.K_ABORT, 0)

        def K_ACTION(self):
            return self.getToken(SimpleQLParser.K_ACTION, 0)

        def K_ADD(self):
            return self.getToken(SimpleQLParser.K_ADD, 0)

        def K_AFTER(self):
            return self.getToken(SimpleQLParser.K_AFTER, 0)

        def K_ALL(self):
            return self.getToken(SimpleQLParser.K_ALL, 0)

        def K_ALTER(self):
            return self.getToken(SimpleQLParser.K_ALTER, 0)

        def K_ANALYZE(self):
            return self.getToken(SimpleQLParser.K_ANALYZE, 0)

        def K_AND(self):
            return self.getToken(SimpleQLParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(SimpleQLParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(SimpleQLParser.K_ASC, 0)

        def K_ATTACH(self):
            return self.getToken(SimpleQLParser.K_ATTACH, 0)

        def K_AUTOINCREMENT(self):
            return self.getToken(SimpleQLParser.K_AUTOINCREMENT, 0)

        def K_BEFORE(self):
            return self.getToken(SimpleQLParser.K_BEFORE, 0)

        def K_BEGIN(self):
            return self.getToken(SimpleQLParser.K_BEGIN, 0)

        def K_BETWEEN(self):
            return self.getToken(SimpleQLParser.K_BETWEEN, 0)

        def K_BY(self):
            return self.getToken(SimpleQLParser.K_BY, 0)

        def K_CASCADE(self):
            return self.getToken(SimpleQLParser.K_CASCADE, 0)

        def K_CASE(self):
            return self.getToken(SimpleQLParser.K_CASE, 0)

        def K_CAST(self):
            return self.getToken(SimpleQLParser.K_CAST, 0)

        def K_CHECK(self):
            return self.getToken(SimpleQLParser.K_CHECK, 0)

        def K_COLLATE(self):
            return self.getToken(SimpleQLParser.K_COLLATE, 0)

        def K_COLUMN(self):
            return self.getToken(SimpleQLParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(SimpleQLParser.K_COMMIT, 0)

        def K_CONFLICT(self):
            return self.getToken(SimpleQLParser.K_CONFLICT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(SimpleQLParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(SimpleQLParser.K_CREATE, 0)

        def K_CROSS(self):
            return self.getToken(SimpleQLParser.K_CROSS, 0)

        def K_CURRENT_DATE(self):
            return self.getToken(SimpleQLParser.K_CURRENT_DATE, 0)

        def K_CURRENT_TIME(self):
            return self.getToken(SimpleQLParser.K_CURRENT_TIME, 0)

        def K_CURRENT_TIMESTAMP(self):
            return self.getToken(SimpleQLParser.K_CURRENT_TIMESTAMP, 0)

        def K_DATABASE(self):
            return self.getToken(SimpleQLParser.K_DATABASE, 0)

        def K_DEFAULT(self):
            return self.getToken(SimpleQLParser.K_DEFAULT, 0)

        def K_DEFERRABLE(self):
            return self.getToken(SimpleQLParser.K_DEFERRABLE, 0)

        def K_DEFERRED(self):
            return self.getToken(SimpleQLParser.K_DEFERRED, 0)

        def K_DELETE(self):
            return self.getToken(SimpleQLParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(SimpleQLParser.K_DESC, 0)

        def K_DETACH(self):
            return self.getToken(SimpleQLParser.K_DETACH, 0)

        def K_DISTINCT(self):
            return self.getToken(SimpleQLParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(SimpleQLParser.K_DROP, 0)

        def K_EACH(self):
            return self.getToken(SimpleQLParser.K_EACH, 0)

        def K_ELSE(self):
            return self.getToken(SimpleQLParser.K_ELSE, 0)

        def K_END(self):
            return self.getToken(SimpleQLParser.K_END, 0)

        def K_ESCAPE(self):
            return self.getToken(SimpleQLParser.K_ESCAPE, 0)

        def K_EXCEPT(self):
            return self.getToken(SimpleQLParser.K_EXCEPT, 0)

        def K_EXCLUSIVE(self):
            return self.getToken(SimpleQLParser.K_EXCLUSIVE, 0)

        def K_EXISTS(self):
            return self.getToken(SimpleQLParser.K_EXISTS, 0)

        def K_EXPLAIN(self):
            return self.getToken(SimpleQLParser.K_EXPLAIN, 0)

        def K_FAIL(self):
            return self.getToken(SimpleQLParser.K_FAIL, 0)

        def K_FOR(self):
            return self.getToken(SimpleQLParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(SimpleQLParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(SimpleQLParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(SimpleQLParser.K_FULL, 0)

        def K_GLOB(self):
            return self.getToken(SimpleQLParser.K_GLOB, 0)

        def K_GROUP(self):
            return self.getToken(SimpleQLParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(SimpleQLParser.K_HAVING, 0)

        def K_IF(self):
            return self.getToken(SimpleQLParser.K_IF, 0)

        def K_IGNORE(self):
            return self.getToken(SimpleQLParser.K_IGNORE, 0)

        def K_IMMEDIATE(self):
            return self.getToken(SimpleQLParser.K_IMMEDIATE, 0)

        def K_IN(self):
            return self.getToken(SimpleQLParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(SimpleQLParser.K_INDEX, 0)

        def K_INDEXED(self):
            return self.getToken(SimpleQLParser.K_INDEXED, 0)

        def K_INITIALLY(self):
            return self.getToken(SimpleQLParser.K_INITIALLY, 0)

        def K_INNER(self):
            return self.getToken(SimpleQLParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(SimpleQLParser.K_INSERT, 0)

        def K_INSTEAD(self):
            return self.getToken(SimpleQLParser.K_INSTEAD, 0)

        def K_INTERSECT(self):
            return self.getToken(SimpleQLParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(SimpleQLParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(SimpleQLParser.K_IS, 0)

        def K_ISNULL(self):
            return self.getToken(SimpleQLParser.K_ISNULL, 0)

        def K_JOIN(self):
            return self.getToken(SimpleQLParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(SimpleQLParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(SimpleQLParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(SimpleQLParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(SimpleQLParser.K_LIMIT, 0)

        def K_MATCH(self):
            return self.getToken(SimpleQLParser.K_MATCH, 0)

        def K_NATURAL(self):
            return self.getToken(SimpleQLParser.K_NATURAL, 0)

        def K_NO(self):
            return self.getToken(SimpleQLParser.K_NO, 0)

        def K_NOT(self):
            return self.getToken(SimpleQLParser.K_NOT, 0)

        def K_NOTNULL(self):
            return self.getToken(SimpleQLParser.K_NOTNULL, 0)

        def K_NULL(self):
            return self.getToken(SimpleQLParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(SimpleQLParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(SimpleQLParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(SimpleQLParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(SimpleQLParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(SimpleQLParser.K_ORDER, 0)

        def K_OUTER(self):
            return self.getToken(SimpleQLParser.K_OUTER, 0)

        def K_PLAN(self):
            return self.getToken(SimpleQLParser.K_PLAN, 0)

        def K_PRAGMA(self):
            return self.getToken(SimpleQLParser.K_PRAGMA, 0)

        def K_PRIMARY(self):
            return self.getToken(SimpleQLParser.K_PRIMARY, 0)

        def K_QUERY(self):
            return self.getToken(SimpleQLParser.K_QUERY, 0)

        def K_RAISE(self):
            return self.getToken(SimpleQLParser.K_RAISE, 0)

        def K_RECURSIVE(self):
            return self.getToken(SimpleQLParser.K_RECURSIVE, 0)

        def K_REFERENCES(self):
            return self.getToken(SimpleQLParser.K_REFERENCES, 0)

        def K_REGEXP(self):
            return self.getToken(SimpleQLParser.K_REGEXP, 0)

        def K_REINDEX(self):
            return self.getToken(SimpleQLParser.K_REINDEX, 0)

        def K_RELEASE(self):
            return self.getToken(SimpleQLParser.K_RELEASE, 0)

        def K_RENAME(self):
            return self.getToken(SimpleQLParser.K_RENAME, 0)

        def K_REPLACE(self):
            return self.getToken(SimpleQLParser.K_REPLACE, 0)

        def K_RESTRICT(self):
            return self.getToken(SimpleQLParser.K_RESTRICT, 0)

        def K_RIGHT(self):
            return self.getToken(SimpleQLParser.K_RIGHT, 0)

        def K_ROLLBACK(self):
            return self.getToken(SimpleQLParser.K_ROLLBACK, 0)

        def K_ROW(self):
            return self.getToken(SimpleQLParser.K_ROW, 0)

        def K_SAVEPOINT(self):
            return self.getToken(SimpleQLParser.K_SAVEPOINT, 0)

        def K_SELECT(self):
            return self.getToken(SimpleQLParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(SimpleQLParser.K_SET, 0)

        def K_TABLE(self):
            return self.getToken(SimpleQLParser.K_TABLE, 0)

        def K_TEMP(self):
            return self.getToken(SimpleQLParser.K_TEMP, 0)

        def K_TEMPORARY(self):
            return self.getToken(SimpleQLParser.K_TEMPORARY, 0)

        def K_THEN(self):
            return self.getToken(SimpleQLParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(SimpleQLParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(SimpleQLParser.K_TRANSACTION, 0)

        def K_TRIGGER(self):
            return self.getToken(SimpleQLParser.K_TRIGGER, 0)

        def K_UNION(self):
            return self.getToken(SimpleQLParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(SimpleQLParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(SimpleQLParser.K_UPDATE, 0)

        def K_USING(self):
            return self.getToken(SimpleQLParser.K_USING, 0)

        def K_VACUUM(self):
            return self.getToken(SimpleQLParser.K_VACUUM, 0)

        def K_VALUES(self):
            return self.getToken(SimpleQLParser.K_VALUES, 0)

        def K_VIEW(self):
            return self.getToken(SimpleQLParser.K_VIEW, 0)

        def K_VIRTUAL(self):
            return self.getToken(SimpleQLParser.K_VIRTUAL, 0)

        def K_WHEN(self):
            return self.getToken(SimpleQLParser.K_WHEN, 0)

        def K_WHERE(self):
            return self.getToken(SimpleQLParser.K_WHERE, 0)

        def K_WITH(self):
            return self.getToken(SimpleQLParser.K_WITH, 0)

        def K_WITHOUT(self):
            return self.getToken(SimpleQLParser.K_WITHOUT, 0)

        def getRuleIndex(self):
            return SimpleQLParser.RULE_keyword

        def enterRule(self, listener):
            if hasattr(listener, "enterKeyword"):
                listener.enterKeyword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKeyword"):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SimpleQLParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (SimpleQLParser.K_ABORT - 25)) | (1 << (SimpleQLParser.K_ACTION - 25)) | (1 << (SimpleQLParser.K_ADD - 25)) | (1 << (SimpleQLParser.K_AFTER - 25)) | (1 << (SimpleQLParser.K_ALL - 25)) | (1 << (SimpleQLParser.K_ALTER - 25)) | (1 << (SimpleQLParser.K_ANALYZE - 25)) | (1 << (SimpleQLParser.K_AND - 25)) | (1 << (SimpleQLParser.K_AS - 25)) | (1 << (SimpleQLParser.K_ASC - 25)) | (1 << (SimpleQLParser.K_ATTACH - 25)) | (1 << (SimpleQLParser.K_AUTOINCREMENT - 25)) | (1 << (SimpleQLParser.K_BEFORE - 25)) | (1 << (SimpleQLParser.K_BEGIN - 25)) | (1 << (SimpleQLParser.K_BETWEEN - 25)) | (1 << (SimpleQLParser.K_BY - 25)) | (1 << (SimpleQLParser.K_CASCADE - 25)) | (1 << (SimpleQLParser.K_CASE - 25)) | (1 << (SimpleQLParser.K_CAST - 25)) | (1 << (SimpleQLParser.K_CHECK - 25)) | (1 << (SimpleQLParser.K_COLLATE - 25)) | (1 << (SimpleQLParser.K_COLUMN - 25)) | (1 << (SimpleQLParser.K_COMMIT - 25)) | (1 << (SimpleQLParser.K_CONFLICT - 25)) | (1 << (SimpleQLParser.K_CONSTRAINT - 25)) | (1 << (SimpleQLParser.K_CREATE - 25)) | (1 << (SimpleQLParser.K_CROSS - 25)) | (1 << (SimpleQLParser.K_CURRENT_DATE - 25)) | (1 << (SimpleQLParser.K_CURRENT_TIME - 25)) | (1 << (SimpleQLParser.K_CURRENT_TIMESTAMP - 25)) | (1 << (SimpleQLParser.K_DATABASE - 25)) | (1 << (SimpleQLParser.K_DEFAULT - 25)) | (1 << (SimpleQLParser.K_DEFERRABLE - 25)) | (1 << (SimpleQLParser.K_DEFERRED - 25)) | (1 << (SimpleQLParser.K_DELETE - 25)) | (1 << (SimpleQLParser.K_DESC - 25)) | (1 << (SimpleQLParser.K_DETACH - 25)) | (1 << (SimpleQLParser.K_DISTINCT - 25)) | (1 << (SimpleQLParser.K_DROP - 25)) | (1 << (SimpleQLParser.K_EACH - 25)) | (1 << (SimpleQLParser.K_ELSE - 25)) | (1 << (SimpleQLParser.K_END - 25)) | (1 << (SimpleQLParser.K_ESCAPE - 25)) | (1 << (SimpleQLParser.K_EXCEPT - 25)) | (1 << (SimpleQLParser.K_EXCLUSIVE - 25)) | (1 << (SimpleQLParser.K_EXISTS - 25)) | (1 << (SimpleQLParser.K_EXPLAIN - 25)) | (1 << (SimpleQLParser.K_FAIL - 25)) | (1 << (SimpleQLParser.K_FOR - 25)) | (1 << (SimpleQLParser.K_FOREIGN - 25)) | (1 << (SimpleQLParser.K_FROM - 25)) | (1 << (SimpleQLParser.K_FULL - 25)) | (1 << (SimpleQLParser.K_GLOB - 25)) | (1 << (SimpleQLParser.K_GROUP - 25)) | (1 << (SimpleQLParser.K_HAVING - 25)) | (1 << (SimpleQLParser.K_IF - 25)) | (1 << (SimpleQLParser.K_IGNORE - 25)) | (1 << (SimpleQLParser.K_IMMEDIATE - 25)) | (1 << (SimpleQLParser.K_IN - 25)) | (1 << (SimpleQLParser.K_INDEX - 25)) | (1 << (SimpleQLParser.K_INDEXED - 25)) | (1 << (SimpleQLParser.K_INITIALLY - 25)) | (1 << (SimpleQLParser.K_INNER - 25)) | (1 << (SimpleQLParser.K_INSERT - 25)))) != 0) or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (SimpleQLParser.K_INSTEAD - 89)) | (1 << (SimpleQLParser.K_INTERSECT - 89)) | (1 << (SimpleQLParser.K_INTO - 89)) | (1 << (SimpleQLParser.K_IS - 89)) | (1 << (SimpleQLParser.K_ISNULL - 89)) | (1 << (SimpleQLParser.K_JOIN - 89)) | (1 << (SimpleQLParser.K_KEY - 89)) | (1 << (SimpleQLParser.K_LEFT - 89)) | (1 << (SimpleQLParser.K_LIKE - 89)) | (1 << (SimpleQLParser.K_LIMIT - 89)) | (1 << (SimpleQLParser.K_MATCH - 89)) | (1 << (SimpleQLParser.K_NATURAL - 89)) | (1 << (SimpleQLParser.K_NO - 89)) | (1 << (SimpleQLParser.K_NOT - 89)) | (1 << (SimpleQLParser.K_NOTNULL - 89)) | (1 << (SimpleQLParser.K_NULL - 89)) | (1 << (SimpleQLParser.K_OF - 89)) | (1 << (SimpleQLParser.K_OFFSET - 89)) | (1 << (SimpleQLParser.K_ON - 89)) | (1 << (SimpleQLParser.K_OR - 89)) | (1 << (SimpleQLParser.K_ORDER - 89)) | (1 << (SimpleQLParser.K_OUTER - 89)) | (1 << (SimpleQLParser.K_PLAN - 89)) | (1 << (SimpleQLParser.K_PRAGMA - 89)) | (1 << (SimpleQLParser.K_PRIMARY - 89)) | (1 << (SimpleQLParser.K_QUERY - 89)) | (1 << (SimpleQLParser.K_RAISE - 89)) | (1 << (SimpleQLParser.K_RECURSIVE - 89)) | (1 << (SimpleQLParser.K_REFERENCES - 89)) | (1 << (SimpleQLParser.K_REGEXP - 89)) | (1 << (SimpleQLParser.K_REINDEX - 89)) | (1 << (SimpleQLParser.K_RELEASE - 89)) | (1 << (SimpleQLParser.K_RENAME - 89)) | (1 << (SimpleQLParser.K_REPLACE - 89)) | (1 << (SimpleQLParser.K_RESTRICT - 89)) | (1 << (SimpleQLParser.K_RIGHT - 89)) | (1 << (SimpleQLParser.K_ROLLBACK - 89)) | (1 << (SimpleQLParser.K_ROW - 89)) | (1 << (SimpleQLParser.K_SAVEPOINT - 89)) | (1 << (SimpleQLParser.K_SELECT - 89)) | (1 << (SimpleQLParser.K_SET - 89)) | (1 << (SimpleQLParser.K_TABLE - 89)) | (1 << (SimpleQLParser.K_TEMP - 89)) | (1 << (SimpleQLParser.K_TEMPORARY - 89)) | (1 << (SimpleQLParser.K_THEN - 89)) | (1 << (SimpleQLParser.K_TO - 89)) | (1 << (SimpleQLParser.K_TRANSACTION - 89)) | (1 << (SimpleQLParser.K_TRIGGER - 89)) | (1 << (SimpleQLParser.K_UNION - 89)) | (1 << (SimpleQLParser.K_UNIQUE - 89)) | (1 << (SimpleQLParser.K_UPDATE - 89)) | (1 << (SimpleQLParser.K_USING - 89)) | (1 << (SimpleQLParser.K_VACUUM - 89)) | (1 << (SimpleQLParser.K_VALUES - 89)) | (1 << (SimpleQLParser.K_VIEW - 89)) | (1 << (SimpleQLParser.K_VIRTUAL - 89)) | (1 << (SimpleQLParser.K_WHEN - 89)) | (1 << (SimpleQLParser.K_WHERE - 89)) | (1 << (SimpleQLParser.K_WITH - 89)) | (1 << (SimpleQLParser.K_WITHOUT - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.NameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_name

        def enterRule(self, listener):
            if hasattr(listener, "enterName"):
                listener.enterName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitName"):
                listener.exitName(self)




    def name(self):

        localctx = SimpleQLParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Function_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_function_name

        def enterRule(self, listener):
            if hasattr(listener, "enterFunction_name"):
                listener.enterFunction_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunction_name"):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SimpleQLParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Database_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_database_name

        def enterRule(self, listener):
            if hasattr(listener, "enterDatabase_name"):
                listener.enterDatabase_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDatabase_name"):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = SimpleQLParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_name"):
                listener.enterTable_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_name"):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = SimpleQLParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Table_or_index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_table_or_index_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_or_index_name"):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_or_index_name"):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = SimpleQLParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.New_table_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_new_table_name

        def enterRule(self, listener):
            if hasattr(listener, "enterNew_table_name"):
                listener.enterNew_table_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNew_table_name"):
                listener.exitNew_table_name(self)




    def new_table_name(self):

        localctx = SimpleQLParser.New_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_new_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Column_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_column_name

        def enterRule(self, listener):
            if hasattr(listener, "enterColumn_name"):
                listener.enterColumn_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumn_name"):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SimpleQLParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Collation_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_collation_name

        def enterRule(self, listener):
            if hasattr(listener, "enterCollation_name"):
                listener.enterCollation_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCollation_name"):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = SimpleQLParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreign_tableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Foreign_tableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_foreign_table

        def enterRule(self, listener):
            if hasattr(listener, "enterForeign_table"):
                listener.enterForeign_table(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForeign_table"):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = SimpleQLParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Index_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_index_name

        def enterRule(self, listener):
            if hasattr(listener, "enterIndex_name"):
                listener.enterIndex_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndex_name"):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = SimpleQLParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Trigger_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_trigger_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTrigger_name"):
                listener.enterTrigger_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTrigger_name"):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = SimpleQLParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.View_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_view_name

        def enterRule(self, listener):
            if hasattr(listener, "enterView_name"):
                listener.enterView_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitView_name"):
                listener.exitView_name(self)




    def view_name(self):

        localctx = SimpleQLParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Module_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_module_name

        def enterRule(self, listener):
            if hasattr(listener, "enterModule_name"):
                listener.enterModule_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitModule_name"):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = SimpleQLParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pragma_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Pragma_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_pragma_name

        def enterRule(self, listener):
            if hasattr(listener, "enterPragma_name"):
                listener.enterPragma_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPragma_name"):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = SimpleQLParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Savepoint_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Savepoint_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_savepoint_name

        def enterRule(self, listener):
            if hasattr(listener, "enterSavepoint_name"):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSavepoint_name"):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = SimpleQLParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Table_aliasContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_table_alias

        def enterRule(self, listener):
            if hasattr(listener, "enterTable_alias"):
                listener.enterTable_alias(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTable_alias"):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = SimpleQLParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Transaction_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_transaction_name

        def enterRule(self, listener):
            if hasattr(listener, "enterTransaction_name"):
                listener.enterTransaction_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTransaction_name"):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = SimpleQLParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(SimpleQLParser.Any_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SimpleQLParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SimpleQLParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SimpleQLParser.STRING_LITERAL, 0)

        def any_name(self):
            return self.getTypedRuleContext(SimpleQLParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SimpleQLParser.RULE_any_name

        def enterRule(self, listener):
            if hasattr(listener, "enterAny_name"):
                listener.enterAny_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAny_name"):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = SimpleQLParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_any_name)
        try:
            self.state = 996
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SimpleQLParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 989
                self.match(SimpleQLParser.IDENTIFIER)
                pass
            elif token in [SimpleQLParser.K_ABORT, SimpleQLParser.K_ACTION, SimpleQLParser.K_ADD, SimpleQLParser.K_AFTER, SimpleQLParser.K_ALL, SimpleQLParser.K_ALTER, SimpleQLParser.K_ANALYZE, SimpleQLParser.K_AND, SimpleQLParser.K_AS, SimpleQLParser.K_ASC, SimpleQLParser.K_ATTACH, SimpleQLParser.K_AUTOINCREMENT, SimpleQLParser.K_BEFORE, SimpleQLParser.K_BEGIN, SimpleQLParser.K_BETWEEN, SimpleQLParser.K_BY, SimpleQLParser.K_CASCADE, SimpleQLParser.K_CASE, SimpleQLParser.K_CAST, SimpleQLParser.K_CHECK, SimpleQLParser.K_COLLATE, SimpleQLParser.K_COLUMN, SimpleQLParser.K_COMMIT, SimpleQLParser.K_CONFLICT, SimpleQLParser.K_CONSTRAINT, SimpleQLParser.K_CREATE, SimpleQLParser.K_CROSS, SimpleQLParser.K_CURRENT_DATE, SimpleQLParser.K_CURRENT_TIME, SimpleQLParser.K_CURRENT_TIMESTAMP, SimpleQLParser.K_DATABASE, SimpleQLParser.K_DEFAULT, SimpleQLParser.K_DEFERRABLE, SimpleQLParser.K_DEFERRED, SimpleQLParser.K_DELETE, SimpleQLParser.K_DESC, SimpleQLParser.K_DETACH, SimpleQLParser.K_DISTINCT, SimpleQLParser.K_DROP, SimpleQLParser.K_EACH, SimpleQLParser.K_ELSE, SimpleQLParser.K_END, SimpleQLParser.K_ESCAPE, SimpleQLParser.K_EXCEPT, SimpleQLParser.K_EXCLUSIVE, SimpleQLParser.K_EXISTS, SimpleQLParser.K_EXPLAIN, SimpleQLParser.K_FAIL, SimpleQLParser.K_FOR, SimpleQLParser.K_FOREIGN, SimpleQLParser.K_FROM, SimpleQLParser.K_FULL, SimpleQLParser.K_GLOB, SimpleQLParser.K_GROUP, SimpleQLParser.K_HAVING, SimpleQLParser.K_IF, SimpleQLParser.K_IGNORE, SimpleQLParser.K_IMMEDIATE, SimpleQLParser.K_IN, SimpleQLParser.K_INDEX, SimpleQLParser.K_INDEXED, SimpleQLParser.K_INITIALLY, SimpleQLParser.K_INNER, SimpleQLParser.K_INSERT, SimpleQLParser.K_INSTEAD, SimpleQLParser.K_INTERSECT, SimpleQLParser.K_INTO, SimpleQLParser.K_IS, SimpleQLParser.K_ISNULL, SimpleQLParser.K_JOIN, SimpleQLParser.K_KEY, SimpleQLParser.K_LEFT, SimpleQLParser.K_LIKE, SimpleQLParser.K_LIMIT, SimpleQLParser.K_MATCH, SimpleQLParser.K_NATURAL, SimpleQLParser.K_NO, SimpleQLParser.K_NOT, SimpleQLParser.K_NOTNULL, SimpleQLParser.K_NULL, SimpleQLParser.K_OF, SimpleQLParser.K_OFFSET, SimpleQLParser.K_ON, SimpleQLParser.K_OR, SimpleQLParser.K_ORDER, SimpleQLParser.K_OUTER, SimpleQLParser.K_PLAN, SimpleQLParser.K_PRAGMA, SimpleQLParser.K_PRIMARY, SimpleQLParser.K_QUERY, SimpleQLParser.K_RAISE, SimpleQLParser.K_RECURSIVE, SimpleQLParser.K_REFERENCES, SimpleQLParser.K_REGEXP, SimpleQLParser.K_REINDEX, SimpleQLParser.K_RELEASE, SimpleQLParser.K_RENAME, SimpleQLParser.K_REPLACE, SimpleQLParser.K_RESTRICT, SimpleQLParser.K_RIGHT, SimpleQLParser.K_ROLLBACK, SimpleQLParser.K_ROW, SimpleQLParser.K_SAVEPOINT, SimpleQLParser.K_SELECT, SimpleQLParser.K_SET, SimpleQLParser.K_TABLE, SimpleQLParser.K_TEMP, SimpleQLParser.K_TEMPORARY, SimpleQLParser.K_THEN, SimpleQLParser.K_TO, SimpleQLParser.K_TRANSACTION, SimpleQLParser.K_TRIGGER, SimpleQLParser.K_UNION, SimpleQLParser.K_UNIQUE, SimpleQLParser.K_UPDATE, SimpleQLParser.K_USING, SimpleQLParser.K_VACUUM, SimpleQLParser.K_VALUES, SimpleQLParser.K_VIEW, SimpleQLParser.K_VIRTUAL, SimpleQLParser.K_WHEN, SimpleQLParser.K_WHERE, SimpleQLParser.K_WITH, SimpleQLParser.K_WITHOUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 990
                self.keyword()
                pass
            elif token in [SimpleQLParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 991
                self.match(SimpleQLParser.STRING_LITERAL)
                pass
            elif token in [SimpleQLParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 992
                self.match(SimpleQLParser.OPEN_PAR)
                self.state = 993
                self.any_name()
                self.state = 994
                self.match(SimpleQLParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[11] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




